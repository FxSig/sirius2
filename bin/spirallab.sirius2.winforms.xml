<?xml version="1.0"?>
<doc>
    <assembly>
        <name>spirallab.sirius2.winforms</name>
    </assembly>
    <members>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd">
            <summary>
            EntityRampEnd entity
            </summary>
            <remarks>
            aka. Automatica Laser Control by Defined Vector
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd.Color">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampEnd.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin">
            <summary>
            EntityRampBegin entity
            </summary>
            <remarks>
            aka. Automatica Laser Control by Defined Vector
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.Signal">
            <summary>
            <c>AutoLaserControlSignal</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.StartingValue">
            <summary>
            Staring value
            </summary>
            <remarks>
            double: Analog: ~10, PulseWidth: us, Frequency: Hz
            uint: DO: ~255(8bits), ~65535(16bits)
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.#ctor(SpiralLab.Sirius2.Scanner.AutoLaserControlSignal,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="signal"><c>AutoLaserControlSignal</c></param>
            <param name="startingValue">Staring signal value: Analog: ~10, DO: ~255, 65535, PulseWidth: us, Frequency: Hz</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRampBegin.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16">
            <summary>
            EntityWriteDataExt16 entity
            </summary>
            <remarks>
            16 bits digital output at EXTENSION 1 port
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.BitPosition">
            <summary>
            Bit position (0~15)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.bitPosition">
            <summary>
            Bit position (0~15)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.BitName">
            <summary>
            Output bit name
            </summary>
            <remarks>
            Used with <c>Config.DOut_RtcExtension1Port</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.OutputValue">
            <summary>
            Output value
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.outputValue">
            <summary>
            Output value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.#ctor(System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bitPosition">Bit postion: 0~15</param>
            <param name="onOff">Output value: on/off</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteDataExt16.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData">
            <summary>
            EntityWriteData entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.OutputChannel">
            <summary>
            <c>ExtensionChannel</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.outputChannel">
            <summary>
            <c>ExtensionChannel</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.OutputValue">
            <summary>
            Output value
            </summary>
            <remarks>
            double: Analog: ~10
            uint: DO: ~255(8bits), ~65535(16bits)
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.outputValue">
            <summary>
             Output value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.#ctor(SpiralLab.Sirius2.Scanner.ExtensionChannel,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="channel"><c>ExtensionChannel</c></param>
            <param name="data">Analog: ~10 or D.Out: ~255(8bits), ~65535(16bits)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityWriteData.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus">
            <summary>
            EntityZDefocus entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.ZDefocus">
            <summary>
            Time (msec)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="zDefocus">Z defocus (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityZDefocus.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityCurve">
            <summary>
            EntityCurve entity
            </summary>
            <remarks>
            Degree 2: Conic bezier
            Degree 3: Cubic bezier
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Start">
            <summary>
            Start X,Y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Control1">
            <summary>
            Control1 X,Y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Control2">
            <summary>
            Control2 X,Y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.End">
            <summary>
            End X,Y (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Degree">
            <summary>
            Degree (Conic: 2, Cubic: 3)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve._Start">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve._Control1">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve._Control2">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityCurve._End">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start x,y</param>
            <param name="control">Control x,y</param>
            <param name="end">End x,y</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.#ctor(OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start x,y</param>
            <param name="control1">Control1 x,y</param>
            <param name="control2">Control2 x,y</param>
            <param name="end">End x,y,z</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityCurve.Reverse">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells">
            <summary>
            BarcodeCells
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells.Dots">
            <summary>
            Dots
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells.Lines">
            <summary>
            Lines
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells.Outline">
            <summary>
            Outline only
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells.Circles">
            <summary>
            Circles
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.BarcodeCells.Hatch">
            <summary>
            Hatch
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.CellDot">
            <summary>
            CellDot
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellDot.DotFactor">
            <summary>
            Dot factor of cell (1x1, 2x2, 3x3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellDot.IsZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellDot.PixelPeriod">
            <summary>
            Pixel Period (usec)
            </summary>
            <remarks>
            Laser ON signal is activated during output pixels.
            Laser Pulse width is modulated by each output pixel time.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellDot.PixelTime">
            <summary>
            Pixel Time (usec)
            </summary>
            <remarks>
            Pixel output time works like as output pulse width. should be lower than <c>PixelPeriod</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellDot.PixelChannel">
            <summary>
            Pixel Output Extension Channel 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellDot.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase)">
            <summary>
            Constructor
            </summary>
            <param name="bcd"><c>EntityBarcodeBase</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellDot.ToString">
            <summary>
            Represent <c>DotFactor</c> as string
            </summary>
            <returns><c>DotFactor</c> as string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellDot.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.CellLine">
            <summary>
            CellLine
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellLine.DotFactor">
            <summary>
            Dot factor of cell (1x1, 2x2, 3x3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellLine.IsZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellLine.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase)">
            <summary>
            Constructor
            </summary>
            <param name="bcd"><c>EntityBarcodeBase</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellLine.ToString">
            <summary>
            Represent <c>DotFactor</c> as string
            </summary>
            <returns><c>DotFactor</c> as string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellLine.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.CellOutLine">
            <summary>
            CellOutLine
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellOutLine.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase)">
            <summary>
            Constructor
            </summary>
            <param name="bcd"><c>EntityBarcodeBase</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellOutLine.ToString">
            <summary>
            Represent <c>DotFactor</c> as string
            </summary>
            <returns><c>DotFactor</c> as string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellOutLine.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.CellHatch">
            <summary>
            CellHatch
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.DotFactor">
            <summary>
            Dot factor of cell (1x1, 2x2, 3x3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchMode">
            <summary>
            HatchModes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.IsZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchAngle">
            <summary>
            Hatch 1st Angle (for Line)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchAngle2">
            <summary>
            Hatch 2nd Angle (for Cross Line)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchInterval">
            <summary>
            Hatch interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchShift">
            <summary>
            Hatch shift (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.HatchExclude">
            <summary>
            Hatch exculde (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.IsHatchOutline">
            <summary>
            Hatch include outline
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellHatch.IsHatchOutlineFirst">
            <summary>
            외곽 가공을 우선할지 여부
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellHatch.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase)">
            <summary>
            Constructor
            </summary>
            <param name="bcd"><c>EntityBarcodeBase</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellHatch.ToString">
            <summary>
            Represent <c>DotFactor</c> as string
            </summary>
            <returns><c>DotFactor</c> as string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellHatch.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.CellCircle">
            <summary>
            CellCircle
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellCircle.DotFactor">
            <summary>
            Dot factor of cell (1x1, 2x2, 3x3,...)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.CellCircle.dotFactor">
            <summary>
            Dot factor (1,2,3,...)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellCircle.IsZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.CellCircle.RadiusFactor">
            <summary>
            Radius scale factor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.CellCircle.radiusFactor">
            <summary>
            Radius factor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellCircle.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase)">
            <summary>
            Constructor
            </summary>
            <param name="bcd"><c>EntityBarcodeBase</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellCircle.ToString">
            <summary>
            Represent <c>DotFactor</c> as string
            </summary>
            <returns><c>DotFactor</c> as string</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.CellCircle.Clone">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase">
            <summary>
            BarcodeBase
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.IsInvertCell">
            <summary>
            Invert Cell 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.isInvertCell">
            <summary>
             Invert cell
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Cell">
            <summary>
            <c>BarcodeCells</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.cell">
            <summary>
            <c>BarcodeCells</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.CellDot">
            <summary>
            <c>CellDot</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.CellLine">
            <summary>
            <c>CellLine</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.CellOutLine">
            <summary>
            <c>CellOutLine</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.CellCircle">
            <summary>
            <c>CellCircle</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.CellHatch">
            <summary>
            <c>CellHatch</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Height">
            <summary>
            Height (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.height">
            <summary>
            Height (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.SourceText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.sourceText">
            <summary>
            Source text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.IsConvertedText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.isConvertedText">
            <summary>
            Converted text or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.ConvertedText">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.IsClosed">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase._SourceText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase._ConvertedText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.glBufferDot">
            <summary>
            GLBuffer for CellDot
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.entityOutline">
            <summary>
            Array of <c>EntityPolyline2D</c> for CellOutline
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.entityLines">
            <summary>
            Array of <c>EntityLine</c> for CellLine
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.entityHatch">
            <summary>
            <c>EntityGroup</c> for CellHatch
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Regen">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.dotMatrix">
            <summary>
            2x2 dot matrix of barcode
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.RegenEncode">
            <summary>
            Regen(or encode) bit matrix of barcode
            </summary>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.RegenCellOutline">
            <summary>
            Regen cell for outline
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.RegenCellLine">
            <summary>
            Regen cell for line
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.RegenCellHatch">
            <summary>
            Regen cell for hatch
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBarcodeBase.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417">
            <summary>
            EntityPDF417 entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.QuiteZone">
            <summary>
            Quite Zone
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.quiteZone">
            <summary>
            Quite zone
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.IsTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.isTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.Px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.Py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.#ctor(System.String,SpiralLab.Sirius2.Winforms.Entity.BarcodeCells,System.Int32,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="cell"><c>Barcode2DCells</c></param>
            <param name="dotFactor">Cell dot factor (1*1, 2*2, ...)</param>
            <param name="height">Height (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPDF417.RegenEncode">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode">
            <summary>
            EntityQRCode entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.QuiteZone">
            <summary>
            Quite Zone
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.quiteZone">
            <summary>
            Quite Zone
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.IsTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.isTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.Encoding">
            <summary>
            Encoding (Default: UTF-8)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.encoding">
            <summary>
            Encoding
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.QrVersion">
            <summary>
            QR code version
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.qrVersion">
            <summary>
            QR code version
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.Px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.Py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.#ctor(System.String,SpiralLab.Sirius2.Winforms.Entity.BarcodeCells,System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="cell"><c>Barcode2DCells</c></param>
            <param name="dotFactor">Cell dot factor (1*1, 2*2, ...)</param>
            <param name="width">Width (mm)</param>
            <param name="height">Height (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityQRCode.RegenEncode">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix">
            <summary>
            EntityDataMatrix entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.QuiteZone">
            <summary>
            Quite Zone
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.quiteZone">
            <summary>
            Quite Zone
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.IsTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.isTextDataGS1">
            <summary>
            GS1 format or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.IsCompactEncoding">
            <summary>
            CompactEncoding or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.IsC40">
            <summary>
            C40 or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.IsSquare">
            <summary>
            Square
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.Px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.px">
            <summary>
            X Pixels
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.Py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.py">
            <summary>
            Y Pixels
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.#ctor(System.String,SpiralLab.Sirius2.Winforms.Entity.BarcodeCells,System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="text">Text</param>
            <param name="cell"><c>Barcode2DCells</c></param>
            <param name="dotFactor">Cell dot factor (1*1, 2*2, ...)</param>
            <param name="width">Width (mm)</param>
            <param name="height">Height (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityDataMatrix.RegenEncode">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityText">
            <summary>
            EntityText entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.FontName">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.SourceText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityText.sourceText">
            <summary>
            Source text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.IsConvertedText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityText.isConvertedText">
            <summary>
            Converted text or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.ConvertedText">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.Width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityText.width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.Height">
            <summary>
            Text height
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityText.height">
            <summary>
            Text height
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.TextHorizontalAlignment">
            <summary>
            String horizontal alignment
            </summary>
            <remarks>
            Default: Near 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.TextVerticalAlignment">
            <summary>
            String vertical alignment
            </summary>
            <remarks>
            Default: Near
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.TextStyle">
            <summary>
            FontStyle
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.IsReversed">
            <summary>
            Reversed pathes or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText.IsClosed">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText._SourceText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityText._ConvertedText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityText.polylines">
            <summary>
            Array of <c>EntityPolyline2D</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.#ctor(System.String,System.String,System.Drawing.FontStyle,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="fontName">Font name</param>
            <param name="text">Text</param>
            <param name="style"><c>System.Drawing.FontStyle</c></param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Reverse">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityText.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D">
            <summary>
            EntityPolyline3D entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.IsClosed">
            <summary>
            Closed status
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="vertices">Array of <c>Vertex2D</c></param>
            <param name="isClosed">Closed figure or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline3D.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle">
            <summary>
            EntityRectangle entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Height">
            <summary>
            Height (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.IsClosed">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.#ctor(OpenTK.Vector2,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="center">Center X,Y (mm)</param>
            <param name="width">Width (mm)</param>
            <param name="height">Height (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityRectangle.ToPolylines">
            <summary>
            Extract to array of polylines
            </summary>
            <remarks>
            Model matrix has applied.
            </remarks>
            <returns>Array of <c>EntityPolyline2D</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait">
            <summary>
            EntityMoFWait entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Condition">
            <summary>
            Encoder wait condition 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Encoder">
            <summary>
            Wait encoder X,Y
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Position">
            <summary>
            Wait encoder position (mm)
            </summary>
            <remarks>
            X,Y Distance From Scanner Head to Rotate Center
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Angle">
            <summary>
            Wait angular encoder angle (degree)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.#ctor(SpiralLab.Sirius2.Scanner.RtcEncoder,SpiralLab.Sirius2.Scanner.RtcEncoderWaitCondition,System.Double)">
            <summary>
            Constructor (MoF XY)
            </summary>
            <param name="encoder"><c>RtcEncoder</c></param>
            <param name="condition"><c>EncoderWaitCondition</c></param>
            <param name="position">Wait position (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.#ctor(SpiralLab.Sirius2.Scanner.RtcEncoderWaitCondition,System.Double)">
            <summary>
            Constructor (MoF Angular)
            </summary>
            <param name="condition"><c>EncoderWaitCondition</c></param>
            <param name="angle">Wait degree (angle)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFWait.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd">
            <summary>
            EntityMoFEnd entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.JumpTo">
            <summary>
            Angular MoF Center
            </summary>
            <remarks>
            X,Y Distance From Scanner Head to Rotate Center
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd._JumpTo">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.#ctor(OpenTK.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="jumpTo">Jump to</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFEnd.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin">
            <summary>
            EntityMoFBegin entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.IsEncoderReset">
            <summary>
            Enable/Disable reset encoder 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.EncoderType">
            <summary>
            Encoder Type 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.AngularCenter">
            <summary>
            Angular MoF Center
            </summary>
            <remarks>
            X,Y Distance From Scanner Head to Rotate Center
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin._AngularCenter">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.#ctor(SpiralLab.Sirius2.Scanner.RtcEncoderType)">
            <summary>
            Constructor
            </summary>
            <param name="type"><c>MoFEncoderType</c> (XY or Angular)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMoFBegin.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityTimer">
            <summary>
            EntityTimer entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.DelayMsec">
            <summary>
            Time (msec)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.#ctor(System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="msec">Delay time (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityTimer.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityImageText">
            <summary>
            EntityImageText entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.FontName">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.SourceText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.sourceText">
            <summary>
            Source text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.IsConvertedText">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.isConvertedText">
            <summary>
            Converted text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.ConvertedText">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.TextHorizontalAlignment">
            <summary>
            String horizontal alignment
            </summary>
            <remarks>
            Default: Near (or Left)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.TextStyle">
            <summary>
            FontStyle
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.PixelHeight">
            <summary>
            Height (pixel)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.pixelHeight">
            <summary>
            Height (pixel)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.IsFill">
            <summary>
            Fill
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.PixelOutline">
            <summary>
            Outline (pixel)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.pixelOutline">
            <summary>
            Outline size
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText._SourceText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImageText._ConvertedText">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.#ctor(System.String,System.String,System.Drawing.FontStyle,System.Boolean,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="fontName"></param>
            <param name="text"></param>
            <param name="style">Font style</param>
            <param name="isFill">Is fill (or outline)</param>
            <param name="pixelOutline">Outline size (if outline only)</param>
            <param name="pixelHeight">Height (pixel)</param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImageText.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud">
            <summary>
            EntityPointsCloud entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.In">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Out">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.VectorAndNormal">
            <summary>
            List of x,y,z vector and x,y,z normal
            </summary>
            <remarks>
            List of V1, V2, V3, N1, N2, N3, ...
            Use <c>ExtractVertices</c> to extract vertices with transformation.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Mode">
            <summary>
            <c>PolygonMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud._VectorAndNormals">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.#ctor(OpenTK.Vector3[])">
            <summary>
            Constructor
            </summary>
            <param name="vertices">Array of <c>Vector3</c> (Vector and Normal)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud.ExtractVertices(OpenTK.Vector3[]@)">
            <summary>
            Extract transformed array of x,y,z vertex
            </summary>
            <param name="vertices">Created array of <c>Vector3</c> if succeeded</param>
            <returns>Success of failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityImage">
            <summary>
            EntityImage entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.FileName">
            <summary>
            Filename
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.width">
            <summary>
            Width (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Height">
            <summary>
            Height (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.height">
            <summary>
            Height (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.IsFixedAspectRatio">
            <summary>
            Fixed Aspect Ratio"
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PixelChannel">
            <summary>
            Pixel Output Extension Channel 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.pixelChannel">
            <summary>
            Pixel Output Extension Channel 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Px">
            <summary>
            Px
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Py">
            <summary>
            Py
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PixelPeriod">
            <summary>
            Pixel Period (usec)
            </summary>
            <remarks>
            Laser ON signal is activated during output pixels.
            Laser Pulse width is modulated by each output pixel time.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.pixelPeriod">
            <summary>
            Pixel Period (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PixelTime">
            <summary>
            Pixel Time (usec)
            </summary>
            <remarks>
            Pixel output time works like as output pulse width. should be lower than <c>PixelPeriod</c>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.pixelTime">
            <summary>
            Pixel Time (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PitchX">
            <summary>
            Pitch x (mm/pixel)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PitchY">
            <summary>
            Pitch y (mm/pixel)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.PixelSpeed">
            <summary>
            Pixel Speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.IsInvertColor">
            <summary>
            Invert Pixel Color
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RasterDirection">
            <summary>
            RasterDirection
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RasterDirection.LeftToRight">
            <summary>
            Left to right 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RasterDirection.RightToLeft">
            <summary>
            Right to left
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RasterDirection.TopToBottom">
            <summary>
            Top to bottom
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RasterDirection.BottomToTop">
            <summary>
            Bottom to top
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Direction">
            <summary>
            Raster Direction
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Base64EncodedImage">
            <summary>
            Image Encodering t Base64 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.bitmap">
            <summary>
            Bitmap resource for image
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityImage.glBuffer">
            <summary>
            GLBuffer 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.#ctor(System.String,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">Image filename</param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.#ctor(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="bitmap"><c>System.Drawing.Bitmap</c></param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.MarkVerticalLine(System.Int32,System.Boolean,SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <summary>
            Mark vertical line 
            </summary>
            <param name="px">Index of x line</param>
            <param name="btmToTop"></param>
            <param name="marker"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityImage.MarkHorizontalLine(System.Int32,System.Boolean,SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <summary>
            Mark horizozntal line
            </summary>
            <param name="py">Index of y line</param>
            <param name="leftToRight"></param>
            <param name="marker"></param>
            <returns></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityArc">
            <summary>
            EntityArc entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Radius">
            <summary>
            Radius (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.StartAngle">
            <summary>
            Start angle (deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.SweepAngle">
            <summary>
            Sweep angle (deg)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.StartRampFactor">
            <summary>
            Start ramp factor (Default: 1)
            </summary>
            <remarks>(Not supported) RTC is not supported arc with ramp yet</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.EndRampFactor">
            <summary>
            End ramp factor (Default: 1)
            </summary>
            <remarks>(Not supported) RTC is not supported arc with ramp yet</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.IsClosed">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityArc.StepAngle">
            <summary>
            Step angle (deg)
            <para>Default: 0</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.#ctor(OpenTK.Vector2,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="center">Center X,Y (mm)</param>
            <param name="radius">Radius (mm)</param>
            <param name="startAngle">Start angle (deg)</param>
            <param name="sweepAngle">Sweep angle (deg)</param>
            <param name="stepAngle">Step angle (deg) (Default: 0)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.#ctor(OpenTK.Vector3,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="center">Center X,Y,Z (mm)</param>
            <param name="radius">Radius (mm)</param>
            <param name="startAngle">Start angle (deg)</param>
            <param name="sweepAngle">Sweep angle (deg)</param>
            <param name="stepAngle">Step angle (deg) (Default: 0)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityArc.Reverse">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityBlock">
            <summary>
            EntityBlock
            <para>Container of entities</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Color">
            <summary>
            <c>EntityGroup</c> is not has its own color
            </summary>
            <remarks>
            Use children <c>IEntity</c> instead
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Repeats">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.#ctor(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Constructor
            </summary>
            <param name="name">Block name</param>
            <param name="entities">Array of <c>IEntity</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.RegenBBox">
            <summary>
            Regen(or recalculate) bounding box
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlock.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert">
            <summary>
            EntityBlockInsert
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Owner">
            <summary>
            Master <c>Block</c> owner (assigned at runtime)
            <para>Must be exist owner <c>EntityBlock</c> in <c>IDocument.Blocks</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.MasterBlockName">
            <summary>
            Master block name
            <para>Must be exist master <c>EntityBlock</c> in <c>IDocument.Blocks</c></para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="masterBlockName">Master blockname</param>
            <para>Must be exist master <c>EntityBlock</c> in <c>IDocument.Blocks</c></para>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.RegenBBox">
            <summary>
            Regen bounding box <c>BBox</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBlockInsert.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.BoundingBox">
            <summary>
            BoundingBox
            </summary>
            <remarks>
            Dimension by min x,y,z and max x,y,z
            Calcuated <c>Parent.ModelMatrix</c> to get real min, max values
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Min">
            <summary>
            Min x,y,z (mm)
            </summary>
            <remarks>Value has NOT applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Max">
            <summary>
            Max x,y,z (mm)
            </summary>
            <remarks>Value has NOT applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Center">
            <summary>
            Center x,y,z (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealMin">
            <summary>
            Real min x,y,z (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealMax">
            <summary>
            Real max x,y,z (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealCenter">
            <summary>
            Real center x,y,z (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealWidth">
            <summary>
            Width (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealHeight">
            <summary>
            Height (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealDepth">
            <summary>
            Depth (mm)
            </summary>
            <remarks>Value has applied parent model matrix</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Parent">
            <summary>
            Parent of entity (Used by internally. Do NOT edit)
            <para>Not saved. automatically regenerate at runtime</para>
            </summary>
            <remarks>
            <c>Parent</c> entity must be assigned to transform parent's model matrix
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.ModelMatrix">
            <summary>
            4x4 parent's model matrix
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.IsEmpty">
            <summary>
            Empty dimension values or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox._Min">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox._Max">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="min">Min X,Y,Z</param>
            <param name="max">Max X,Y,Z</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.#ctor(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="min">Min X,Y</param>
            <param name="max">Max X,Y</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Empty">
            <summary>
            Create empty <c>BoundingBox</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Clear">
            <summary>
            Clear internal data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.ToString">
            <summary>
            Represent dimensnion of<c>BoundingBox</c>
            </summary>
            <returns>Real. dimensnion for <c>BoundingBox</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Regen">
            <summary>
            Regenerate (or recalculate real min, max by original min, max)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.Render(SpiralLab.Sirius2.Winforms.IView)">
            <summary>
            Render boundgin box at <c>IView</c>
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point)">
            <summary>
            Hittest by Min, Max (Before transformed)
            </summary>
            <param name="view"></param>
            <param name="p"></param>
            <returns>Is hitted or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealUnion(SpiralLab.Sirius2.Winforms.Entity.BoundingBox)">
            <summary>
            Union region only real(or transformed) coordinate values
            </summary>
            <param name="bbox"><c>BoundingBox</c></param>
            <returns><c>BoundingBox</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealUnions(SpiralLab.Sirius2.Winforms.Entity.BoundingBox[])">
            <summary>
            Union region only real(or transformed) coordinate values
            </summary>
            <param name="bboxes">Array of <c>BoundingBox</c></param>
            <returns><c>BoundingBox</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealBoundingBox(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Get real bounding box include children entities
            </summary>
            <param name="entity"></param>
            <returns><c>BoundingBox</c></returns>
            <remarks>
            Real bounding box means all vertices has matrix transfored (or applied).
            So only RealMin, RealMax values are meaningful.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.BoundingBox.RealBoundingBox(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Get real bounding box include children entities
            </summary>
            <param name="entities">Array of entities</param>
            <returns><c>BoundingBox</c></returns>
            <remarks>
            Real bounding box means all vertices has matrix transfored (or applied).
            So only RealMin, RealMax values are meaningful.
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd">
            <summary>
            EntityMeasurementEnd entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd.Color">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementEnd.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin">
            <summary>
            EntityMeasurementBegin entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Title">
            <summary>
            Title
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.SamplingFrequency">
            <summary>
            Sample Frequency (Hz)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.samplingFrequency">
            <summary>
            Sample Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Channels">
            <summary>
            Array of <c>MeasurementChannel</c>
            </summary>
            <remarks>
            RTC4: 2 channels
            RTC5: 4 channels
            RTC6: 8 channels
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.channels">
            <summary>
            Array of <c>MeasurementChannel</c>
            </summary>        
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.IsRawData">
            <summary>
            Raw Data Format or not 
            Default: False
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.isRawData">
            <summary>
            Raw Data Format or not 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.#ctor(System.Double,SpiralLab.Sirius2.Scanner.MeasurementChannel[])">
            <summary>
            Constructor
            </summary>
            <param name="samplingFrequency"></param>
            <param name="channels"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase">
            <summary>
            EntityControlBase
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.IsRenderable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.IsMarkerable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.IsHitTestable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.Alignment">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.ModelAlign">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.ModelTranslate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.ModelScale">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.ModelRotate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.In">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.Out">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.BBox">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.ModelMatrix">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityControlBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis">
            <summary>
            EntityPenSyncAxis entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis.MinMarkSpeed">
            <summary>
            SyncAxis min mark speed (mm/s)
            </summary>
            <remarks>
            Activated if greater then 0
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis.minMarkSpeed">
            <summary>
            SyncAxis min mark speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis.ApproxBlendLimit">
            <summary>
            SyncAxis approx. Blend Limit (mm)
            </summary>
            <remarks>
            Activated if greater then 0
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis.approxBlendLimit">
            <summary>
            SyncAxis approx. Blend Limit (mm)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPenSyncAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc">
            <summary>
            EntityPenRtc entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.LaserFpk">
            <summary>
            FPK (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.laserFpk">
            <summary>
            FPK (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.LaserQSwitchDelay">
            <summary>
            Q switch delay (usec)
            <para>Used with <c>LaserMode.YAG5</c> </para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.laserQSwitchDelay">
            <summary>
            Q switch delay (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.LaserOnDelay">
            <summary>
            Laser on delay (usec)
            </summary>
            <remarks>
            If too low, burn in at start location
            If too high, skip at start location
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.laserOnDelay">
            <summary>
            Laser on delay (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.LaserOffDelay">
            <summary>
            Laser off delay (usec)
            </summary>
            <remarks>
            If too low, skip at end location
            If too high, burn out at end location
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.laserOffDelay">
            <summary>
            Laser off delay (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerJumpDelay">
            <summary>
            Scanner jump delay (usec)
            </summary>
            <remarks>
            If too low, overshoot or vibrate at start location
            If too high, increase total processing time
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerJumpDelay">
            <summary>
            Scanner jump delay (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerMarkDelay">
            <summary>
            Scanner mark delay (usec)
            </summary>
            <remarks>
            If too low, overshoot at end location
            If too high, increase total processing time
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerMarkDelay">
            <summary>
            Scanner mark delay (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerPolygonDelay">
            <summary>
            Scanner polygon delay  (usec)
            </summary>
            <remarks>
            If too low, blending motion between corners (mark and mark)
            If too high, sharpness at corners (mark and mark) 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerPolygonDelay">
            <summary>
            Scanner polygon delay  (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.IsScannerVariablePolygonDelay">
            <summary>
            Enable/Disable variable scanner polygon delay
            </summary>
            <remarks>
            scale(angle) = 1 – Cosine(angle)
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.isScannerVariablePolygonDelay">
            <summary>
            Enable/Disable variable scanner polygon delay
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerVariablePolygonDelayEdgeLevel">
            <summary>
            Variable scanner polygon delay edge level (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerVariablePolygonDelayEdgeLevel">
            <summary>
            Variable scanner polygon delay edge level (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.IsScannerVariableJumpDelay">
            <summary>
            Enable/Disable variable scanner jump delay
            </summary>
            <remarks>
            Variable scanner jump delay depends jump distance
            Short distance : low delay time
            Long distance : high delay time
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.isScannerVariableJumpDelay">
            <summary>
            Enable/Disable variable scanner jump delay
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerVariableJumpDelayMin">
            <summary>
            Variable scanner jump delay min. time (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerVariableJumpDelayMin">
            <summary>
            Variable scanner jump delay min. time (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.ScannerVariableJumpLength">
            <summary>
            Variable scanner jump length (mm)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.scannerVariableJumpLength">
            <summary>
            Variable scanner jump length (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.IsSkyWritingEnabled">
            <summary>
            Enable/Disable skywriting
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.SkyWritingMode">
            <summary>
            Skywriting mode
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.LaserOnShift">
            <summary>
            Skywriting laser on shift (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.laserOnShift">
            <summary>
            Skywriting laser on shift (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.TimeLag">
            <summary>
            Skywriting time lag (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.timeLag">
            <summary>
            Skywriting time lag (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.Prev">
            <summary>
            Skywriting prev (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.prev">
            <summary>
            Skywriting prev (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.Post">
            <summary>
            Skywriting post (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.post">
            <summary>
            Skywriting post (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.AngularLimit">
            <summary>
            Skywriting angular limit at mode 3
            </summary>
            <remarks>
            Activated skywriting if greater then angular limit
            Example. If 90 degree, activated 91,92,...
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.angularLimit">
            <summary>
            Skywriting angular limit at mode 3
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.IsWobbelEnabled">
            <summary>
            Enable/Disable wobbel shape
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.WobbelPerpendicular">
            <summary>
            Wobbel perpendicular(or transversal) size (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.WobbelParallel">
            <summary>
            Wobbel parallel size (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.WobbelFrequency">
            <summary>
            Wobbel frequency (Hz)
            </summary>
            <remarks>
            CW if greater than 0 <br/>
            Mustbe lower than 0.1/TrackingErr <br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.wobbelFrequency">
            <summary>
            Wobbel frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.WobbelShape">
            <summary>
            Wobbel shape
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPenRtc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityBase">
            <summary>
            EntityBase
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.SyncRoot">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Id">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Color">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.color">
            <summary>
            Color of <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Vector4Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Name">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.name">
            <summary>
            Name of <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Description">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsRenderable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsMarkerable">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.isMarkerable">
            <summary>
            IsMarkerable
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsHitTestable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsSelected">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsHasChildren">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.IsNeedToRegen">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Parent">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Children">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ChildCount">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Alignment">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.alignment">
            <summary>
            <c>Alignments</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ModelAlign">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.modelAlign">
            <summary>
            Model align
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ModelTranslate">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.modelTranslate">
            <summary>
            Model translate
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ModelScale">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.modelScale">
            <summary>
            Model scale
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ModelRotate">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase.modelRotate">
            <summary>
            Model rotate
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.View">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Node">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Tag">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.In">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Out">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.BBox">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ModelMatrix">
            <summary>
            Entity model matrix 
            </summary>
            <returns><c>Matrix4</c></returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase._ModelTranslate">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase._ModelAlign">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase._ModelRotate">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase._Children">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityBase._IsDocumentDeserialzing">
            <summary>
            Document is deserializing flag (used by internally)
            <para>To prevent invalid property value set when deserialize document</para>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityBase._EntityId">
            <summary>
            Counts of created entities at runtime
            <para>Used by internally</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Entity name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.ToString">
            <summary>
            Represent for <c>IEntity</c>
            </summary>
            <returns>Description for <c>IEntity</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Clone">
            <summary>
            Implement clone of <c>EntityBase</c> 
            </summary>
            <remarks>Deep clone of <c>EntityBase</c></remarks>
            <returns>Deep cloned of <c>EntityBase</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.InternalClone(SpiralLab.Sirius2.Winforms.Entity.EntityBase)">
            <summary>
            Internal clone for deep copy
            </summary>
            <param name="entity">Source <c>EntityBase</c></param>
            <returns>Clone for <c>EntityBase</c> internal data</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.RegenAlign">
            <summary>
            Re-adjust position for align by <c>Alignment</c> value
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.MarkPen(SpiralLab.Sirius2.Winforms.Marker.IMarker,SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Mark entity's pen parameter if color has changed 
            </summary>
            <param name="marker"><c>IMarker</c></param>
            <param name="entity"><c>IEntity</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Translate(OpenTK.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Translate(OpenTK.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Translate(System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.RotateX(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.RotateY(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.RotateZ(System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Rotate(System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityBase.Scale(System.Double)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.Alignments">
            <summary>
            Alignments
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.Custom">
            <summary>
            Custom (user editable <c>ModelAlign</c>)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.TopLeft">
            <summary>
            Top left
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.TopCenter">
            <summary>
            Top center
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.TopRight">
            <summary>
            Top right
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.MiddleLeft">
            <summary>
            Middle left
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.MiddleCenter">
            <summary>
            Middle center
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.MiddleRight">
            <summary>
            Middle right
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.BottomLeft">
            <summary>
            Bottom left
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.BottomCenter">
            <summary>
            Bottom center
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.Alignments.BottomRight">
            <summary>
            Bottom right
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IEntity">
            <summary>
            IEntity interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.SyncRoot">
            <summary>
            Synchronization object 
            </summary>
            <remarks>
            Used for to prevent cross thread issue.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Id">
            <summary>
            Entity Id
            </summary>
            <remarks>
            Automatically assigned (or increased) at runtime.<br/>
            Not saved.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Color">
            <summary>
            Color of <c>IEntity</c>
            </summary>
            <remarks>
            Should be one of <c>Config.PensColor</c> values.<br/>
            Used <c>Color</c> value when do mark or render <c>IEntity</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Vector4Color">
            <summary>
            Color of <c>IEntity</c>
            </summary>
            <remarks>
            Converted  <c>Color</c> to Vector4 format.<br/>
            Used by internally.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Name">
            <summary>
            Name of <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Description">
            <summary>
            Description of <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsRenderable">
            <summary>
            Allow do render <c>IEntity</c> or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsMarkerable">
            <summary>
            Allow do mark <c>IEntity</c> or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsHitTestable">
            <summary>
            Allow do hittest <c>IEntity</c> or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsSelected">
            <summary>
            Selected status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsNeedToRegen">
            <summary>
            Is need to <c>Regen</c> or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Parent">
            <summary>
            Parent of <c>IEntity</c>
            </summary>
            <remarks>
            If parent of <c>IEbtity</c> has assigned, parent of model matrix will be applied (or accumulated).
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.IsHasChildren">
            <summary>
            Is has child(or <c>IEntity</c>) or not
            </summary>
            <remarks>
            If has children, it will be shown at <c>TreeView</c> control.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Children">
            <summary>
            List children of <c>IEntity</c> 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ChildCount">
            <summary>
            Counts children of <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.In">
            <summary>
            In(or start) X,Y,Z (mm)
            </summary>
            <remarks>
            Matrix transformed(or applied) location. <br/>
            Recalculate by <c>RegenInOut</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Out">
            <summary>
            Out(or end) X,Y,Z (mm)
            </summary>
            <remarks>
            Matrix transformed(or applied) location. <br/>
            Recalculate by <c>RegenInOut</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.BBox">
            <summary>
            Bounding Box 
            </summary>
            <remarks>
            It has dimension information of <c>IEntity</c>.<br/>
            Recalculate real coordinate locations by <c>BBox.Regen</c><br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Alignment">
            <summary>
            Alignments
            </summary>
            <remarks>
            Alignment for dimension of <c>IEntity</c>.<br/>
            Used with <c>BBox.Min</c>, <c>BBox.Max</c> and <c>ModelAlign</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ModelAlign">
            <summary>
            Model align
            </summary>
            <remarks>
            Translate for alignment position.<br/>
            Calculated by automatically when <c>Alignment</c> has modified.<br/>
            Real alignment = <c>BBox.Min</c> + <c>ModelAlign</c><br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ModelTranslate">
            <summary>
            Model translate
            </summary>
            <remarks>
            Translated by dx, dy and dz (mm)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ModelScale">
            <summary>
            Model scale
            </summary>
            <remarks>
            Scaled by sx, sy, sz (Must be > 0)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ModelRotate">
            <summary>
            Model rotate
            </summary>
            <remarks>
            Rotated degree(°) at x,y and z axis
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.ModelMatrix">
            <summary>
            Model matrix by 4x4
            </summary>
            <remarks>
            Used with <c>IRenderable.Render</c> and <c>IMarkerable.Mark</c>.<br/>
            <c>ModelMatrix</c> = <c>ModelAlign</c> * <c>ModelRotate</c> * <c>ModelRotate</c> * <c>ModelTranslate</c>.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Node">
            <summary>
            <c>Treeview</c> node
            </summary>
            <remarks>
            <c>Node.Tag</c> value assinged as <c>IEntity</c> by forcily (used by internally)<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IEntity.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Regen">
            <summary>
            Regenerate internal data
            </summary>
            <remarks>
            Recalculate whole vertices, bounding box, in, out location, and alignment
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.RegenInOut">
            <summary>
            Regenerate <c>In</c>, <c>Out</c> location
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.RegenAlign">
            <summary>
            Regenerate <c>ModelAlign</c> location
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Translate(OpenTK.Vector3)">
            <summary>
            Translate dx, dy, dz
            </summary>
            <param name="dXyz"><c>Vector3</c> for dx, dy, dz (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Translate(OpenTK.Vector2)">
            <summary>
            Translate dx, dy
            </summary>
            <param name="dXy"><c>Vector2</c> for dx, dy (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Translate(System.Double,System.Double,System.Double)">
            <summary>
            Translate dx, dy, dz
            </summary>
            <param name="dX">Dx (mm)</param>
            <param name="dY">Dy (mm)</param>
            <param name="dZ">Dz (mm) (Default= 0)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.RotateX(System.Double)">
            <summary>
            Rotate at x axis
            </summary>
            <param name="dAngle">Delta degree (°)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.RotateY(System.Double)">
            <summary>
            Rotate at y axis
            </summary>
            <param name="dAngle">Delta degree (°)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.RotateZ(System.Double)">
            <summary>
            Rotate at z axis
            </summary>
            <param name="dAngle">Delta degree (°)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Rotate(System.Double,System.Double,System.Double)">
            <summary>
            Rotate x,y,z
            </summary>
            <param name="dAngleX">Delta degree x (°)</param>
            <param name="dAngleY">Delta degree y (°)</param>
            <param name="dAngleZ">Delta degree z (°)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IEntity.Scale(System.Double)">
            <summary>
            Scale sx, sy, sz
            </summary>
            <param name="dScale">Delta scale</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IMarkerable">
            <summary>
            IMarkerable interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IMarkerable.Repeats">
            <summary>
            Repeat mark counts when do <c>Mark</c>
            </summary>
            <remarks>
            Default: 1
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IMarkerable.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <summary>
            Do mark <c>IEntity</c>
            </summary>
            <param name="marker"><c>IMarker</c></param>
            <returns>Success or not</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IRenderable">
            <summary>
            IRenderable interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IRenderable.View">
            <summary>
            Rendered target <c>IView</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IRenderable.Render(SpiralLab.Sirius2.Winforms.IView)">
            <summary>
            Do render <c>IEntity</c> at <c>IView</c>
            </summary>
            <param name="view"><c>IView</c> interface</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IRenderable.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <summary>
            Do hit-test (like as mouse click) for <c>IEntity</c> at <c>IView</c>
            </summary>
            <param name="view"><c>IView</c></param>
            <param name="mousePosition">Mouse position by <c>System.Drawing.Point</c></param>
            <param name="hittedEntity">Hitted <c>IEntity</c> if succeeded</param>
            <returns>Success of hit test or not</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IExplodable">
            <summary>
            IExplodable interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IExplodable.Explode">
            <summary>
            Explode to array of <c>IEntity</c>
            </summary>
            <returns>Exploded array of <c>IEntity</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IReversable">
            <summary>
            IReversable interface
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IReversable.Reverse">
            <summary>
            Reverse internal path order
            </summary>
            <returns>Success or not</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IExtractPolyline">
            <summary>
            IExtractPolyline
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IExtractPolyline.ToPolylines">
            <summary>
            Extract array of <c>EntityPolyline2D</c>
            </summary>
            <remarks>
            Transformed with Model 4x4 matrix
            </remarks>
            <returns>Array of <c>EntityPolyline2D</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.HatchModes">
            <summary>
            Hatch modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.HatchModes.Line">
            <summary>
            Line
            </summary>
            <remarks>Used with <c>Angle</c></remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.HatchModes.CrossLine">
            <summary>
            Cross Lines
            </summary>
            <remarks>Used with <c>Angle</c> and <c>Angle2</c></remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.IHatchable">
            <summary>
            IHatchable interface
            </summary>    
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.IHatchable.IsClosed">
            <summary>
            Is closed path or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.IHatchable.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Do hatch for closed figures at <c>IEntity</c>
            </summary>
            <param name="hatchMode"><c>HatchModes</c></param>
            <param name="isZigZag">ZigZag</param>
            <param name="angle">Angle 1st</param>
            <param name="angle2">Angle 2nd for <c>CrossLine</c></param>        
            <param name="interval">Interval (mm)</param>
            <param name="exclude">Exclude (mm)</param>        
            <param name="shift">Shift offset (mm)</param>  
            <returns>Hatched <c>EntityGroup</c> entity</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.ITextConvertible">
            <summary>
            ITextConvertible interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.ITextConvertible.IsConvertedText">
            <summary>
            Enable(or disable) converted text data 
            <code>
            SpiralLab.Sirius2.Winforms.Config.OnTextConvert += Text_OnTextConvert;
            private bool Text_OnTextConvert(IMarker marker, ITextConvertible textConvertible)
            {
                var entity = textConvertible as IEntity;
                if (entity.Name == "TextEntityName1")
                {
                    // Example for "yyyyMMdd HH:mm:ss"
                    textConvertible.ConvertedText = DateTime.Now.ToString(textConvertible.SourceText); 
                }                
                return true;
            }
            </code>
            </summary>
            <remarks>
            To enable(or use it), user should be attached <c>Config.OnTextConvert</c> event handler at first.
            <c>Config.OnTextConvert</c> event would be fired before do mark by <c>IMarkerable.Mark</c> at <c>IMarker</c>.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.ITextConvertible.SourceText">
            <summary>
            Source text data
            </summary>
            <remarks>
            If <c>IsConvertedText</c> is <c>False</c>, <c>SourceText</c> value used.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.ITextConvertible.ConvertedText">
            <summary>
            Converted text data
            </summary>
            <remarks>
            If <c>IsConvertedText</c> is <c>True</c>, <c>ConvertedText</c> value used.
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityFace">
            <summary>
            EntityFace
            <para>Triangles + Normals</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Vertices">
            <summary>
            Face (Triangle)
            </summary>
            <remarks>
            Face: Vector1,Normal1, Vector2,Normal2, Vector3,Normal3 
            Length: 6
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityFace._Vertices">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.#ctor(OpenTK.Vector3[])">
            <summary>
            Constructor
            </summary>
            <param name="vertices">Face = 6 vertices (3 * vector and normal)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Translate(OpenTK.Vector3)">
            <summary>
            Transit dx, dy, dz (mm)
            </summary>
            <param name="delta"> dx, dy, dz (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFace.Transform(OpenTK.Matrix4)">
            <summary>
            Transform <c>EntityFace</c> by 4x4 Matrix
            </summary>
            <param name="matrix">Transform <c>Matrix4</c></param>
            <returns><c>EntityFace</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityGroup">
            <summary>
            EntityGroup entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Color">
            <summary>
            <c>EntityGroup</c> is not has its own color
            </summary>
            <remarks>
            Use children <c>IEntity</c> instead
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.IsClosed">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.#ctor(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="entities">Array of <c>IEntity</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.PathSort">
            <summary>
            Sort path order by <c>In</c>, <c>Out</c>
            </summary>
            <remarks>
            Path could be reversed to connect <c>In</c>, <c>Out</c> between <c>IEntity</c>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.PathMerge">
            <summary>
            Merge path into <c>EntityPolyline2D</c>
            </summary>
            <returns>Sucess of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityGroup.Reverse">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis">
            <summary>
            EntityLayerSyncAxis entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.MotionType">
            <summary>
            SyncAxis: Motion type
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.motionType">
            <summary>
            SyncAxis: <c>MotionType</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.BandWidth">
            <summary>
            SyncAxis: Bandwidth (Hz)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.bandWidth">
            <summary>
            SyncAxis: Bandwidth (Hz)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayerSyncAxis.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Layer name</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc">
            <summary>
            EntityLayerRtc entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.IsALC">
            <summary>
            Enable/Disable ALC (Automatic Laser Control) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcSignal">
            <summary>
            ALC (Automatic Laser Control) Control signal
            <c>AutoLaserControlSignal</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcPercentage100">
            <summary>
            ALC (Automatic Laser Control) 100% Output value
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcMinValue">
            <summary>
            ALC (Automatic Laser Control) Min Output value
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcMaxValue">
            <summary>
            ALC (Automatic Laser Control) Max Output value
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcMode">
            <summary>
            ALC (Automatic Laser Control) Control Mode 
            <c>AutoLaserControlMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.AlcByPositionTable">
            <summary>
            ALC (Automatic Laser Control) + Position Dependent Compensate Table
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayerRtc.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Layer name</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityLayer">
            <summary>
            EntityLayer entity
            <para>Inherited from <c>EntityLayerSyncAxis</c> -> <c>EntityLayerRtc</c> -> <c>EntityBase</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.IsHitTestable">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Alignment">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ModelAlign">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ModelTranslate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ModelScale">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ModelRotate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.BBox">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ModelMatrix">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLayer.PropertyVisibility(SpiralLab.Sirius2.Scanner.IRtc)">
            <summary>
            Property visibility
            </summary>
            <param name="rtc"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPen">
            <summary>
            EntityPen entity
            <para>Inherited from <c>EntityPen</c> -> <c>EntityPenSyncAxis</c> -> <c>EntityPenRtc</c> -> <c>EntityControlBase</c> -> <c>EntityBase</c> </para>
            </summary>
            <remarks>
            When <c>IDocument</c> has created, <c>EntityPen</c> are created and reset default values by <c>Config.OnCreatePen</c> event
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Power">
            <summary>
            Output power (W)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.power">
            <summary>
            Output power (W)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.PowerMax">
            <summary>
            Laser source max power (W)
            </summary>
            <remarks>User should be assign max laser power (W) at first</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.PowerPercentage">
            <summary>
            Max power (W) (by laser source)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Frequency">
            <summary>
            Frequency (Hz)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.frequency">
            <summary>
            Frequency (Hz)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.PulseWidth">
            <summary>
            Pulse width (usec)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.pulseWidth">
            <summary>
            Pulse width (usec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.DutyCycle">
            <summary>
            Duty cycle (%)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.dutyCycle">
            <summary>
            Duty cycle (%)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.JumpSpeed">
            <summary>
            Jump speed (mm/s)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.jumpSpeed">
            <summary>
            Jump speed (mm/s)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPen.MarkSpeed">
            <summary>
            Mark speed (mm/s)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.EntityPen.markSpeed">
            <summary>
            Mark speed (mm/s)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Equals(SpiralLab.Sirius2.Winforms.Entity.EntityPen)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.PropertyVisibility(SpiralLab.Sirius2.Scanner.IRtc)">
            <summary>
            Property visibility
            </summary>
            <param name="rtc"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPen.PropertyVisibility(SpiralLab.Sirius2.Laser.ILaser)">
            <summary>
            Property visibility
            </summary>
            <param name="laser"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral">
            <summary>
            EntitySpiral entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.StartDiameter">
            <summary>
            Start diameter (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.EndDiameter">
            <summary>
            End Diameter (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Height">
            <summary>
            Height (mm)
            </summary>
            <remarks>
            +: Height, Upper
            -: Depth, Lower
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Revolutions">
            <summary>
            Revolutions 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.IsClosed">
            <summary>
            Closed figure or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.RadialPitch">
            <summary>
            Radial Pitch (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.DepthPitch">
            <summary>
            Depth Pitch (mm)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.#ctor(OpenTK.Vector3,System.Double,System.Double,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="center">Center X,Y,Z (mm)</param>
            <param name="startDiameter">Start diameter (mm)</param>
            <param name="endDiameter">End diameter (mm)</param>
            <param name="height">Height (mm)</param>
            <param name="revolutions">Revolutions</param>
            <param name="isClosed">Closed figure or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntitySpiral.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPoints">
            <summary>
            EntityPoints entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.IsHardJump">
            <summary>
            (Experimental!) Hard jump
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.IsHardJumpLaserDelays">
            <summary>
            (Experimental!) Hard jump with override delays
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.HardJumpLaserOnDelay">
            <summary>
            (Experimental!) Hard jump laser on delay
            </summary>
            <remarks>
            Set <c>IsHardJumpLaserDelays</c> as True to use
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.HardJumpLaserOffDelay">
            <summary>
            (Experimental!) Hard jump laser off delay
            </summary>
            <remarks>
            Set <c>IsHardJumpLaserDelays</c> as True to use
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.HardJumpDelay">
            <summary>
            (Experimental!) Hard jump delay
            </summary>
            <remarks>
            Set <c>IsHardJumpLaserDelays</c> as True to use
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.#ctor(OpenTK.Vector2[],System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="locations">Array of location x,y</param>
            <param name="dwellTime">Dwell time (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.Reverse">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoints.PropertyVisibility(SpiralLab.Sirius2.Scanner.IRtc)">
            <summary>
            Property visibility
            </summary>
            <param name="rtc"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPoint">
            <summary>
            EntityPoint entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.DwellMsec">
            <summary>
            Dwell time (msec)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.#ctor(OpenTK.Vector2,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="location">Location x,y</param>
            <param name="dwellTime">Dwell time (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.#ctor(OpenTK.Vector3,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="location">Location x,y,z</param>
            <param name="dwellTime">Dwell time (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="dwellTime">Dwell time (msec)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPoint.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityLine">
            <summary>
            EntityLine entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Start">
            <summary>
            Start X,Y,Z (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.StartRampFactor">
            <summary>
            Start ramp factor (Default: 1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.End">
            <summary>
            End X,Y,Z (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.EndRampFactor">
            <summary>
            End ramp factor (Default: 1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Center">
            <summary>
            Center X,Y,Z (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Length">
            <summary>
            Length (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine.IsReverseMarkWithRepeats">
            <summary>
            Mark with reverse each repeat time when mark
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine._Start">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityLine._End">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.#ctor(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start x,y</param>
            <param name="end">End x,y</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.#ctor(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Constructor
            </summary>
            <param name="start">Start x,y,z</param>
            <param name="end">End x,y,z</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="startX">Start x</param>
            <param name="startY">Start y</param>
            <param name="endX">End x</param>
            <param name="endY">End y</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.Reverse">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityLine.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D">
            <summary>
            EntityPolyline2D entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.IsClosed">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="vertices">Array of <c>Vertex2D</c></param>
            <param name="isClosed">Closed figure or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Explode">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.ToVertices">
            <summary>
            Extract vertices from <c>EntityPolyline2D</c>
            </summary>
            <remarks>
            Vertices are calculated before transform matries.
            Divided arc to lines by <c>Config.DivideArcToLinesDistance</c>
            </remarks>
            <returns>Array of <c>Vertor3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Hatch(SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Mark(SpiralLab.Sirius2.Winforms.Marker.IMarker)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.Reverse">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D.ToPolylines">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityFactory">
            <summary>
            EntityFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateLine(OpenTK.Vector2,OpenTK.Vector2)">
            <summary>
            Create <c>EntityLine</c> entity
            </summary>
            <param name="start">Start x,y</param>
            <param name="end">End x,y</param>
            <returns><c>EntityLine</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateLine(OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Create <c>EntityLine</c> entity
            </summary>
            <param name="start">Start x,y,z</param>
            <param name="end">End x,y,z</param>
            <returns><c>EntityLine</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateLine(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create <c>EntityLine</c> entity
            </summary>
            <param name="startX">Start x</param>
            <param name="startY">Start y</param>
            <param name="endX">End x</param>
            <param name="endY">End y</param>
            <returns><c>EntityLine</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreatePoint(OpenTK.Vector2,System.Double)">
            <summary>
            Create <c>EntityPoint</c> entity
            </summary>
            <param name="location">X,Y</param>
            <param name="dwellTime">Dwell time (msec)</param>
            <returns><c>EntityPoint</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreatePoint(System.Double,System.Double,System.Double)">
            <summary>
            Create <c>EntityPoint</c> entity
            </summary>
            <param name="x">X</param>
            <param name="y">Y </param>
            <param name="dwellTime">Dwell time (msec)</param>
            <returns> <c>EntityPoint</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreatePoints(OpenTK.Vector2[],System.Double)">
            <summary>
            Create <c>EntityPoints</c> entity
            </summary>
            <param name="locations">Array of X,Y</param>
            <param name="dwellTime">Dwell time (msec)</param>
            <returns><c>EntityPoints</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateArc(OpenTK.Vector2,System.Double,System.Double,System.Double,System.UInt32)">
            <summary>
            Create <c>EntityArc</c> entity
            </summary>
            <param name="center">X, Y Center (mm)</param>
            <param name="radius">Radius (mm)</param>
            <param name="startAngle">Start angle (deg)</param>
            <param name="sweepAngle">Sweep angle (deg)</param>
            <param name="stepAngle">Step angle (deg) (Default: 0)</param>
            <returns><c>EntityArc</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateRectangle(OpenTK.Vector2,System.Double,System.Double)">
            <summary>
            Create <c>EntityRectangle</c> entity
            </summary>
            <param name="center"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns><c>EntityRectangle</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateSpiral(OpenTK.Vector2,System.Double,System.Double,System.Double,System.UInt32,System.Boolean)">
            <summary>
            Create <c>EntitySpiral</c> entity
            </summary>
            <param name="center">X, Y Center (mm)</param>
            <param name="startDiameter">Inner diameter (mm)</param>
            <param name="endDiameter">Outter diameter (mm)</param>
            <param name="height">Height (mm)</param>
            <param name="revolutions">Revolutions</param>
            <param name="isClosed">Closed figure or not</param>
            <returns><c>EntitySpiral</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreatePolyline2D(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D[],System.Boolean)">
            <summary>
            Create <c>CreatePolyline2D</c> entity
            </summary>
            <param name="vertices">Array of <c>Vertex2D</c></param>
            <param name="isClosed">Closed figure or not</param>
            <returns><c>CreatePolyline2D</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateStereoLithography(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityStl@)">
            <summary>
            Create <c>EntityStl</c> entity by STL file
            </summary>
            <param name="fileName">StereoLithography(.stl) filename</param>
            <param name="stlEntity"><c>EntityStl</c> entity</param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateDxf(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityGroup@)">
            <summary>
            Create <c>EntityGroup</c> entity by Dxf file
            </summary>
            <param name="fileName">Dxf(.dxf) filename</param>
            <param name="dxfEntity">Dxf <c>EntityGroup</c> entity</param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateHpgl(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityGroup@)">
            <summary>
            Create <c>EntityGroup</c> entity by HPGL(PLT) file
            </summary>
            <param name="fileName">HPGL(.plt) filename</param>
            <param name="hpglEntity">HPGL entity</param>
             <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateCurve(OpenTK.Vector2[])">
            <summary>
            Create <c>EntityCurve</c> entity by cubic bezier spline
            </summary>
            <remarks>
            Conic: 3 vertices <br/>
            Cubic: 4 vertices <br/>
            </remarks>
            <param name="vertices">3 or 4 array of vertices</param>
            <returns><c>EntityCurve</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateGroup(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Create <c>EntityGroup</c> entity
            </summary>
            <remarks>
            Dimension of <c>EntityGroup</c> is calculated when created
            </remarks>
            <param name="name">Name</param>
            <param name="entities">Array of <c>IEntity</c></param>
            <returns> <c>EntityGroup</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateImage(System.String,System.Double,System.Double)">
            <summary>
            Create <c>EntityImage</c> entity
            </summary>
            <param name="fileName">Image filename</param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm) (If width is 0, aspect-ratio will be calculated by automatically)</param>
            <returns> <c>EntityImage</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateImage(System.Drawing.Bitmap,System.Double,System.Double)">
            <summary>
            Create <c>EntityImage</c> entity
            </summary>
            <remarks>
            You must dispose <c>System.Drawing.Bitmap</c> by yourself after function call
            </remarks>
            <param name="bitmap"><c>System.Drawing.Bitmap</c></param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm) (If width is 0, aspect-ratio will be calculated by automatically)</param>
            <returns><c>EntityImage</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateImageText(System.String,System.String,System.Drawing.FontStyle,System.Boolean,System.Int32,System.Int32,System.Double,System.Double)">
            <summary>
            Create <c>EntityImageText</c> entity
            </summary>
            <param name="fontName">Font family name</param>
            <param name="text">Text</param>
            <param name="style"><c>System.Drawing.FontStyle</c></param>
            <param name="isFill">Fill (or outline)</param>
            <param name="outlineSize">Outline size (if outline)</param>
            <param name="pixelHeight">Height (pixel)</param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm) (If width is 0, aspect-ratio will be calculated by automatically)</param>
            <returns><c>EntityImageText</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateText(System.String,System.String,System.Drawing.FontStyle,System.Double,System.Double)">
            <summary>
            Create <c>EntityText</c> entity
            </summary>
            <param name="fontName">Font family name</param>
            <param name="text">Text</param>
            <param name="style"><c>System.Drawing.FontStyle</c></param>
            <param name="height">Height (mm)</param>
            <param name="width">Width (mm) (If width is 0, aspect-ratio will be calculated by automatically)</param>
            <returns><c>EntityText</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateBlock(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Create <c>EntityBlock</c> entity
            </summary>
            <param name="blockName">Block name</param>
            <param name="entities">Child array of <c>IEntity</c></param>
            <returns> <c>EntityBlock</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateBlockInsert(System.String)">
            <summary>
            Create <c>EntityBlockInsert</c> entity
            </summary>
            <remarks>
            Target name of <c>EntityBlack</c> should be exist at <c>Document.Blocks</c>
            </remarks>
            <param name="blockName">Master block name</param>
            <returns> <c>EntityBlockInsert</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateDataMatrix(System.String,SpiralLab.Sirius2.Winforms.Entity.BarcodeCells,System.Int32,System.Double,System.Double)">
            <summary>
            Create <c>EntityDataMatrix</c> entity
            </summary>
            <param name="text">Text</param>
            <param name="cell"><c>Barcode2DCells</c></param>
            <param name="dotFactor">Cell dot factor (1*1, 2*2, ...)</param>
            <param name="width">Width (mm)</param>
            <param name="height">Height (mm)</param>
            <returns><c>EntityDataMatrix</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateQRCode(System.String,SpiralLab.Sirius2.Winforms.Entity.BarcodeCells,System.Int32,System.Double,System.Double)">
            <summary>
            Create <c>EntityQRCode</c> entity
            </summary>
            <param name="text">Text</param>
            <param name="cell"><c>Barcode2DCells</c></param>
            <param name="dotFactor">Cell dot factor (1*1, 2*2, ...)</param>
            <param name="width">Width (mm)</param>
            <param name="height">Height (mm)</param>
            <returns><c>EntityQRCode</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateLayer(System.String)">
            <summary>
            Create <c>EntityLayer</c> entity
            </summary>
            <param name="name">Name</param>
            <returns><c>EntityLayer</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateTimer(System.Double)">
            <summary>
            Create <c>EntityTimer</c> entity
            </summary>
            <param name="mesc">Delay time (msec)</param>
            <returns><c>EntityTimer</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMeasurementBegin(System.Double,SpiralLab.Sirius2.Scanner.MeasurementChannel[])">
            <summary>
            Create <c>EntityMeasurementBegin</c> entity
            </summary>
            <param name="samplingFrequency">Frequency (Hz)</param>
            <param name="channels">Target channels</param>
            <returns><c>EntityMeasurementBegin</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMeasurementEnd">
            <summary>
            Create <c>EntityMeasurementEnd</c> entity
            </summary>
            <returns><c>EntityMeasurementEnd</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMoFBegin(SpiralLab.Sirius2.Scanner.RtcEncoderType)">
            <summary>
            Create <c>EntityMoFBegin</c> entity
            </summary>
            <param name="type"><c>MoFEncoderType</c></param>
            <returns><c>EntityMoFBegin</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMoFWait(SpiralLab.Sirius2.Scanner.RtcEncoder,SpiralLab.Sirius2.Scanner.RtcEncoderWaitCondition,System.Double)">
            <summary>
            Create <c>EntityMoFWait</c> Wait for X/Y
            </summary>
            <param name="encoder"><c>RtcEncoder</c></param>
            <param name="condition"><c>EncoderWaitCondition</c></param>
            <param name="position">Wait position (mm)</param>
            <returns><c>EntityMoFWait</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMoFWait(SpiralLab.Sirius2.Scanner.RtcEncoderWaitCondition,System.Double)">
            <summary>
            Create <c>EntityMoFWait</c> Wait for Angular
            </summary>
            <param name="condition"><c>EncoderWaitCondition</c></param>
            <param name="angle">Wait degree (angle)</param>
            <returns><c>EntityMoFWait</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateMoFEnd(OpenTK.Vector2)">
            <summary>
            Create <c>EntityMoFEnd</c> entity
            </summary>
            <param name="jumpTo">Jump to when MoF has ended</param>
            <returns><c>EntityMoFEnd</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateZDefocus(System.Double)">
            <summary>
            Create <c>EntityZDefocus</c> entity
            </summary>
            <param name="zDefocus">Z defocus (mm)</param>
            <returns><c>EntityZDefocus</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateRampBegin(SpiralLab.Sirius2.Scanner.AutoLaserControlSignal,System.Double)">
            <summary>
            Create <c>EntityRampBegin</c> entity 
            </summary>
            <remarks>
            ALC(Automatic laser control) with defined vector 
            </remarks>
            <param name="signal"><c>AutoLaserControlSignal</c></param>
            <param name="startingValue">Staring signal value: Analog: ~10, DO: ~255, 65535, PulseWidth: us, Frequency: Hz</param>
            <returns> <c>EntityRampBegin</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateRampEnd">
            <summary>
            Create <c>EntityRampEnd</c> entity
            </summary>
            <remarks>
            ALC(Automatic laser control) with defined vector 
            </remarks>
            <returns><c>EntityRampEnd</c> </returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateWriteData(SpiralLab.Sirius2.Scanner.ExtensionChannel,System.Double)">
            <summary>
            Create <c>EntityWriteData</c> entity 
            </summary>
            <param name="channel"><c>ExtensionChannel</c></param>
            <param name="data">Analog: ~10 or D.Out: ~255(8bits), ~65535(16bits)</param>
            <returns><c>EntityWriteData</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityFactory.CreateWriteDataExt16(System.Int32,System.Boolean)">
            <summary>
            Create <c>EntityWriteDataExt16</c> entity 
            </summary>
            <remarks>
            Write digital output at RTC EXTENSION 1 port (16bits)
            </remarks>
            <param name="bitPosition"></param>
            <param name="onOff"></param>
            <returns> <c>EntityWriteDataExt16</c> </returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D">
            <summary>
            EntityVertex2D entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.ModelScale">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.ModelRotate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Bulge">
            <summary>
            Bulge (Atan/4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.RampFactor">
            <summary>
            Ramp factor (Default: 1)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.#ctor(OpenTK.Vector2,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="location">X,Y</param>
            <param name="bulge">Bulge (Atan/4)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="bulge">Bulge (Atan/4)</param>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Zero">
            <summary>
            Zero <c> EntityVertex2D</c>instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Transform(OpenTK.Matrix4)">
            <summary>
            Apply(or transform) <c>EntityVertex2D</c> with 4x4 matrix
            </summary>
            <param name="matrix"><c>Matrix4</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Equals(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D)">
            <summary>
            Equality check
            </summary>
            <param name="other"><c>EntityVertex2D</c></param>
            <returns>Equal or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Distance(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D)">
            <summary>
            Distance between <c>EntityVertex2D</c>
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Distance</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.AngleZ(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D)">
            <summary>
            Angle between <c>EntityVertex2D</c> at Z axis
            </summary>
            <param name="v1">From <c>EntityVertex2D</c></param>
            <param name="v2">To <c>EntityVertex2D</c></param>
            <returns>Degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.op_Subtraction(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D)">
            <summary>
            Subtract between <c>EntityVertex2D</c>
            </summary>
            <param name="left"><c>EntityVertex2D</c></param>
            <param name="right"><c>EntityVertex2D</c></param>
            <returns><c>EntityVertex2D</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.AngleZ(SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D)">
            <summary>
            Angle of <c>EntityVertex2D</c> (From origin location)
            </summary>
            <param name="v"><c>EntityVertex2D</c></param>
            <returns>Radian</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex2D.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D">
            <summary>
            EntityVertex3D entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Color">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.ModelScale">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.ModelRotate">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Bulge">
            <summary>
            Bulge (Atan/4)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.RampFactor">
            <summary>
            Ramp factor (Default: 1)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.ModelMatrix">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.#ctor(OpenTK.Vector3,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="location">X,Y,Z</param>
            <param name="bulge">Bulge (Atan/4)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructor
            </summary>
            <param name="x">X</param>
            <param name="y">Y</param>
            <param name="z">Z</param>
            <param name="bulge">Bulge (Atan/4)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Transform(OpenTK.Matrix4)">
            <summary>
            Apply(or transform) <c>EntityVertex2D</c> with 4x4 matrix
            </summary>
            <param name="matrix"><c>Matrix4</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Equals(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Equality check
            </summary>
            <param name="other"><c>EntityVertex3D</c></param>
            <returns>Equal or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Distance(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Distance between <c>EntityVertex3D</c>
            </summary>
            <param name="v1"></param>
            <param name="v2"></param>
            <returns>Distance</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleX(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle between <c>EntityVertex3D at X axis</c>
            </summary>
            <param name="v1">From <c>EntityVertex3D</c></param>
            <param name="v2">To <c>EntityVertex3D</c></param>
            <returns>Degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleY(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle between <c>EntityVertex3D at Y axis</c>
            </summary>
            <param name="v1">From <c>EntityVertex3D</c></param>
            <param name="v2">To <c>EntityVertex3D</c></param>
            <returns>Degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleZ(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle between <c>EntityVertex3D at Z axis</c>
            </summary>
            <param name="v1">From <c>EntityVertex3D</c></param>
            <param name="v2">To <c>EntityVertex3D</c></param>
            <returns>Degree</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.op_Subtraction(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D,SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Subtract between <c>EntityVertex3D</c>
            </summary>
            <param name="left"><c>EntityVertex3D</c></param>
            <param name="right"><c>EntityVertex3D</c></param>
            <returns><c>EntityVertex3D</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleX(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle of <c>EntityVertex3D</c> (From origin location) at Z axis
            </summary>
            <param name="v"><c>EntityVertex3D</c></param>
            <returns>Radian</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleY(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle of <c>EntityVertex3D</c> (From origin location) at Z axis
            </summary>
            <param name="v"><c>EntityVertex3D</c></param>
            <returns>Radian</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.AngleZ(SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D)">
            <summary>
            Angle of <c>EntityVertex3D</c> (From origin location) at Z axis
            </summary>
            <param name="v"><c>EntityVertex3D</c></param>
            <returns>Radian</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.RegenInOut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityVertex3D.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.STLMode">
            <summary>
            STL modes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLMode.Fill">
            <summary>
            Fill (solid)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLMode.Wireframe">
            <summary>
            Wiretframe (lines)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLMode.Points">
            <summary>
            Points (vertices)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.STLAlignZ">
            <summary>
            STL z align
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLAlignZ.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLAlignZ.Bottom">
            <summary>
            Align to bottom
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLAlignZ.Center">
            <summary>
            Align to center
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Entity.STLAlignZ.Top">
            <summary>
            Align to top
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Entity.EntityStl">
            <summary>
            EntityStl entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Repeats">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.In">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Out">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.FileName">
            <summary>
            STL Filename
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Mode">
            <summary>
            <c>PolygonMode</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Faces">
            <summary>
            Array of <c>EntityFace</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">StereoLithography(.stl) filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.#ctor(SpiralLab.Sirius2.Winforms.Entity.EntityFace[])">
            <summary>
            Constructor
            </summary>
            <param name="faces">Array of <c>EntityFace</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.ToString">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Clone">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Regen">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.Render(SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.HitTest(SpiralLab.Sirius2.Winforms.IView,System.Drawing.Point,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Entity.EntityStl.ExtractPointsCloud(OpenTK.Vector3,SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud@)">
            <summary>
            Extract point clounds from STL surface and return <c>EntityPointsCloud</c>
            </summary>
            <param name="dir">Directional vector</param>
            <param name="entityPointsColud">Created <c>EntityPointCloud</c> if succeeded</param>
            <returns>Success of failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.FontHelper">
            <summary>
            FontHelper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontHelper.GetOutlines(System.String,System.String,System.Single,System.Int32,System.Drawing.StringAlignment,System.Drawing.StringAlignment,System.Boolean,System.Drawing.RectangleF@,SpiralLab.Sirius2.Winforms.Entity.EntityPolyline2D[]@)">
            <summary>
            Get outline of font text string
            </summary>
            <param name="fontName"></param>
            <param name="text"></param>
            <param name="height"></param>
            <param name="fontStyle"><c>System.Drawing.FontStyle</c></param>
            <param name="horizontalAlignment"><c>StringAlignment</c></param>
            <param name="verticalAlignment"><c>StringAlignment</c></param>
            <param name="isReversed">Reverse character order or not</param>
            <param name="rectf"></param>
            <param name="polylines">Created array of <c>EntityPolyline2D</c></param>
            <returns>Success or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontHelper.EncodeTo(System.String)">
            <summary>
            Encode string to Base64 
            </summary>
            <param name="str">string</param>
            <returns>Base64</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontHelper.DecodeFrom(System.String)">
            <summary>
            Decode Base64 to string
            </summary>
            <param name="base64String">base64 formatted string</param>
            <returns>string</returns>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.POINTFLOAT.X">
            <summary>
            Specifies the horizontal (x) coordinate of a point.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.POINTFLOAT.Y">
            <summary>
            Specifies the vertical (y) coordinate of a point.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.GLYPHMETRICSFLOAT.gmfBlackBoxX">
            <summary>
            Specifies the width of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.GLYPHMETRICSFLOAT.gmfBlackBoxY">
            <summary>
            Specifies the height of the smallest rectangle (the glyph's black box) that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.GLYPHMETRICSFLOAT.gmfptGlyphOrigin">
            <summary>
            Specifies the x and y coordinates of the upper-left corner of the smallest rectangle that completely encloses the glyph.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.GLYPHMETRICSFLOAT.gmfCellIncX">
            <summary>
            Specifies the horizontal distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Gdi.GLYPHMETRICSFLOAT.gmfCellIncY">
            <summary>
            Specifies the vertical distance from the origin of the current character cell to the origin of the next character cell.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.BitmapHelper">
            <summary>
            BitmapHelper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.EncodeTo(System.Drawing.Bitmap)">
            <summary>
            Encode bitmap to base64 encoding
            </summary>
            <param name="bitmap">Bitmap</param>
            <returns>Base64</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.DecodeFrom(System.String)">
            <summary>
            Decode base64 encoding to bitmap
            </summary>
            <param name="base64String">base64 formatted string</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.ConvertToBitmap(System.String)">
            <summary>
            Load bitmap to image
            </summary>
            <param name="fileName"></param>
            <returns><c>System.Drawing.Bitmap </c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.ConvertToBitmap(System.IO.Stream)">
            <summary>
            Convert stream to image
            </summary>
            <param name="stream">Stream</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.RGB2Gray(System.Drawing.Color)">
            <summary>
            RGB to gray
            </summary>
            <param name="color"><c>Color</c></param>
            <returns>Gray level from 0 ~ 1</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.ToStream(System.Drawing.Image,System.Drawing.Imaging.ImageFormat)">
            <summary>
            Image Extension
            </summary>
            <param name="image"><c>Image</c></param>
            <param name="format"><c>ImageFormat</c></param>
            <returns><c>Stream</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.BitmapHelper.CreateTextToImage(System.String,System.String,System.Double,System.Int32,System.Drawing.StringAlignment,System.Boolean,System.Double,System.Drawing.Bitmap@,System.Drawing.SizeF@)">
            <summary>
            Create bitmap text
            </summary>
            <param name="fontName">Font name</param>
            <param name="text">Text string</param>
            <param name="pixels">Height of pixel</param>
            <param name="fontStyle"><c>System.Drawing.FontStyle</c></param>
            <param name="isFill">Is outline only</param>
            <param name="outlineSize">Outline size (if outline only)</param>
            <param name="horizontalAlignment">Horizontal of <c>StringAlignment</c></param>
            <param name="bitmap">Created <c>System.Drawing.Bitmap</c></param>
            <param name="sizef">Create size of <c>System.Drawing.Bitmap</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession">
            <summary>
            MeasurementSession
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Marker">
            <summary>
            <c>IMarker</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Title">
            <summary>
            Title 
            </summary>
            <remarks>
            Plot title
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Job">
            <summary>
            Combined Rtc <c>IJob</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.MeasurementBegin">
            <summary>
            Executed <c>EntityMeasurementBegin</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.MeasurementEnd">
            <summary>
            Executed <c>EntityMeasurementEnd</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.FileName">
            <summary>
            Filename to auto saved
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.IsEmpty">
            <summary>
            Empty data or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.#ctor(SpiralLab.Sirius2.Winforms.Marker.IMarker,System.String,SpiralLab.Sirius2.Winforms.Entity.EntityMeasurementBegin,SpiralLab.Sirius2.Scanner.IJob)">
            <summary>
            Constructor
            </summary>
            <param name="marker"><c>IMarker</c></param>
            <param name="title">Title</param>
            <param name="entity"><c>IENtity</c></param>
            <param name="job"><c>IJob</c></param>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Empty">
            <summary>
            Create empty <c>MeasurementSession</c> instance
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.ToString">
            <summary>
            Represent for <c>EntityMeasurementBegin</c> with <c>FileName</c>
            </summary>
            <returns>Description for <c>MeasurementSession</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Save(SpiralLab.Sirius2.Scanner.IRtcMeasurement)">
            <summary>
            Save measurement result into file
            </summary>
            <param name="rtcMeasurement"><c>IRtcMeasurement</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MeasurementSession.Plot">
            <summary>
            Plot measurement result to graph
            </summary>
            <remarks>
            Used <c>Config.GNUPlotProgramPath</c> program.<br/>
            </remarks>
            <returns>Success of failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkerFactory">
            <summary>
            MarkerFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerFactory.CreateVirtual(System.Int32)">
            <summary>
            Create Marker
            </summary>
            <param name="index">Card id (starting from 0)</param>
            <returns><c>MarkerVirtual</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerFactory.CreateRtc5(System.Int32)">
            <summary>
            Create RTC5 Marker
            </summary>
            <param name="index">Card id (starting from 0)</param>
            <returns><c>MarkerRtc</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerFactory.CreateRtc6(System.Int32)">
            <summary>
            Create RTC6 Marker
            </summary>
            <param name="index">Card id (starting from 0)</param>
            <returns><c>MarkerRtc</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerFactory.CreateSyncAxis(System.Int32)">
            <summary>
            Create SyncAXIS(XL-SCAN) Marker
            </summary>
            <param name="index">Instance id (starting from 0)</param>
            <returns><c>MarkerSyncAxis</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkerBase">
            <summary>
            MarkerBase
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.PropertyChanged">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnStarted">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnFailed">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnFinished">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnBeforeLayer">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnAfterLayer">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnBeforeEntity">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.OnAfterEntity">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Index">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Document">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.View">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Rtc">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Laser">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.AccumulatedMarks">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.MarkTarget">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.IsJumpToOriginAfterFinished">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Offsets">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.offsets">
            <summary>
            Array of <c>Offset</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentOffsetIndex">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.currentOffsetIndex">
            <summary>
            Current offset index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentLayerIndex">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.currentLayerIndex">
            <summary>
            current layer index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentLayer">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.currentLayer">
            <summary>
            Current layer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentEntityIndex">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.currentEntityIndex">
            <summary>
            Current entity index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentEntity">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.currentEntity">
            <summary>
            Current entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.CurrentPenColor">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.penColor">
            <summary>
            Current pen color
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.IsReady">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.isReady">
            <summary>
            Ready status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.IsBusy">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.isBusy">
            <summary>
            Busy status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.IsError">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.isError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.TimeSpan">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.timeSpan">
            <summary>
            TimeSpan
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Tag">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.isThreadBusy">
            <summary>
            Worker thread is working or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Ready(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Laser.ILaser)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Start">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Stop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.EntityWork(System.Int32,SpiralLab.Sirius2.Winforms.Entity.EntityLayer,System.Int32,SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Mark each <c>IEntity</c>
            </summary>
            <param name="offsetIndex">Offset index</param>
            <param name="layer"><c>EntityLayer</c></param>
            <param name="entityIndex">Entity index</param>
            <param name="entity"><c>IEntity</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.LayerWork(System.Int32,SpiralLab.Sirius2.Winforms.Entity.EntityLayer,SpiralLab.Sirius2.Mathematics.Offset)">
            <summary>
            Mark each <c>EntityLayer</c>
            </summary>
            <param name="offsetIndex">Offset index</param>
            <param name="layer"><c>EntityLayer</c></param>
            <param name="offset"><c>Offset</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyPropertyChanged(System.String)">
            <summary>
            Notify property value has change event
            </summary>
            <param name="propertyName">Property name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyStarted">
            <summary>
            Notify makrer has started event
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyFailed">
            <summary>
            Notify marker has failed event
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyFinished">
            <summary>
            Notify marker has finished event
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyBeforeLayer(SpiralLab.Sirius2.Winforms.Entity.EntityLayer)">
            <summary>
            Notify before mark <c>EntityLayer</c> event
            </summary>
            <param name="layer"><c>EntityLayer</c></param>
            <remarks>
            Do something to works before mark <c>EntityLayer</c><br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyAfterLayer(SpiralLab.Sirius2.Winforms.Entity.EntityLayer)">
            <summary>
            Notify after mark <c>EntityLayer</c> event
            </summary>
            <param name="layer"><c>EntityLayer</c></param>
            <remarks>
            Do something to works after mark <c>EntityLayer</c>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyBeforeEntity(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Notify before mark <c>IEntity</c> event
            </summary>
            <param name="entity"><c>IEntity</c></param>
            <remarks>
            Do something to works before mark <c>IEntity</c>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerBase.NotifyAfterEntity(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Notify after mark <c>IEntity</c> event
            </summary>
            <param name="entity"><c>IEntity</c></param>
            <remarks>
            Do something to works after mark <c>IEntity</c><br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual">
            <summary>
            MarkerVirtual
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.thread">
            <summary>
            internal marker thread 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.layers">
            <summary>
            list of layers to mark
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Ready(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Laser.ILaser)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Start">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Stop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerVirtual.MarkerThread">
            <summary>
            Marker thread for async workds
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis">
            <summary>
            MarkerSyncAxis
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.IsExecuteViewer">
            <summary>
            Plot measurement session to syncAXIS viewer
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.OperationStatusColor">
            <summary>
            Op status 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.IsMeasurementPlot">
            <summary>
            Is plot simulation output to syncAxis viewer
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.isMeasurementPlot">
            <summary>
            Is plot measurement session to graph or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.thread">
            <summary>
            Internal marker thread 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.layers">
            <summary>
            list of layers to mark
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Ready(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Laser.ILaser)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Start">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Stop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerSyncAxis.MarkerThread">
            <summary>
            Marker thread for async workds
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc">
            <summary>
            MarkerRtc
            </summary>
            <remarks>
            Used with RTC4,5,6,6e
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.IsExternalStart">
            <summary>
            Enable/Disable External /START trigger
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.ListType">
            <summary>
            <c>ListType</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Session">
            <summary>
            Array of <c>MeasurementSession</c> <br/>
            </summary>
            <remarks>
            Session = <c>EntityMeasurementBegin</c> + <c>EntityMeasurementEnd</c><br/>
            Valid when <c>EntityMeasurementBegin</c> had executed<br/>
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.sessionQueue">
            <summary>
            Queue for <c>MeasurementSession</c> 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.CurrentSession">
            <summary>
            Current (or last measurement session)
            </summary>
            <remarks>
            Valid when <c>EntityMeasurementBegin</c> had executed<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.IsMeasurementPlot">
            <summary>
            Is plot measurement session to graph or not
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.isMeasurementPlot">
            <summary>
            Is plot measurement session to graph or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.MaxMeasurementTime">
            <summary>
            Max buffer size
            </summary>
            <remarks>
            RTC max buffer size
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.IsCheckTempOk">
            <summary>
            Check scanner temperature when start of mark
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.IsCheckPowerOk">
            <summary>
            Check scanner power supply when start of mark
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.IsCheckPositionAck">
            <summary>
            Check scanner position acknowledge when start of mark
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.thread">
            <summary>
            Internal marker thread 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.layers">
            <summary>
            List of layers to mark
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.#ctor(System.Int32,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="index">Index</param>
            <param name="name">Name</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Dispose(System.Boolean)">
            <inheritdoc/>  
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Initialize">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Ready(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Laser.ILaser)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Start">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Stop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.MarkerThread">
            <summary>
            Marker thread
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.MarkerRtc.NotifyPlot">
            <summary>
            Plot measurement to graph by gnuplot
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.MarkTargets">
            <summary>
            Mark targets
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkTargets.All">
            <summary>
            All entities
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Marker.MarkTargets.Selected">
            <summary>
            Selected entities
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Marker.IMarker">
            <summary>
            IMarker interface
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnStarted">
            <summary>
            OnStarted event handler
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnFailed">
            <summary>
            OnFailed event handler
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnFinished">
            <summary>
            OnFinished event handler
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnBeforeLayer">
            <summary>
            OnBeforeLayer event handler
            </summary>
            <remarks>
            Do external control works like as i/o, motion stage controls before mark layer.<br/>
            If returned False, mark progress would be stopped.<br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnAfterLayer">
            <summary>
            OnAfterLayer event handler
            </summary>
            <remarks>
            Do external control works like as i/o, motion stage controls after mark layer.<br/>
            If returned False, mark progress would be stopped.<br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnBeforeEntity">
            <summary>
            OnBeforeEntity event handler
            </summary>
            <remarks>
            Consider as within RTC list buffer is executing.<br/>
            If returned False, mark progress would be stopped.<br/>
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Marker.IMarker.OnAfterEntity">
            <summary>
            OnAfterEntity event handler
            </summary>
            <remarks>
            Consider as within RTC list buffer is executing.<br/>
            If returned False, mark progress would be stopped.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Index">
            <summary>
            Index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Document">
            <summary>
            <c>IDocument</c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.View">
            <summary>
            <c>IView </c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Rtc">
            <summary>
            <c>IRtc</c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Laser">
            <summary>
            <c>ILaser</c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.IsJumpToOriginAfterFinished">
            <summary>
            Jump to origin (0,0) location after mark has finished
            </summary>
            <remarks>
            Must be <c>True</c> if using syncAXIS.<br/>
            syncAXIS has recalculate every trajectory planning from origin location.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.AccumulatedMarks">
            <summary>
            Accumulated counts of mark
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.MarkTarget">
            <summary>
            <c>MarkTargets</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Offsets">
            <summary>
            Array of offset (dx, dy, dz and angle z)
            <code>
            var offsets = new SpiralLab.Sirius2.Mathematics.Offset[] 
            {
                new Offset(-10, 0, 0),
                new Offset(10, 0, 0),
            };
            marker.Offsets = offets;
            marker.Start(); 
            </code>
            </summary>
            <remarks>
            Default: <c>SpiralLab.Sirius2.Mathematics.Offset.Zero</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentOffsetIndex">
            <summary>
            Current working(or marking) offset index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentLayerIndex">
            <summary>
            Current working(or marking layer) index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentLayer">
            <summary>
            Current working(or marking layer) 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentEntityIndex">
            <summary>
            Current working(or marking) entity index
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentEntity">
            <summary>
            Current working(or marking) entity 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.CurrentPenColor">
            <summary>
            Current working(or marking) pen color
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.TimeSpan">
            <summary>
            Processing <c>TimeSpan</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.IsReady">
            <summary>
            Ready status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.IsBusy">
            <summary>
            Busy status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.IsError">
            <summary>
            Error status
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Marker.IMarker.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.IMarker.Initialize">
            <summary>
            Initialize
            </summary>
            <returns>Success or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.IMarker.Ready(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Laser.ILaser)">
            <summary>
            Ready
            </summary>
            <param name="document"><c>IDocument</c></param>
            <param name="view"><c>IView</c></param>
            <param name="rtc"><c>IRtc</c></param>
            <param name="laser"><c>ILaser</c></param>
            <returns>Success or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.IMarker.Start">
            <summary>
            Start
            </summary>
            <returns>Success or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.IMarker.Stop">
            <summary>
            Stop
            </summary>
            <returns>Success or not</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Marker.IMarker.Reset">
            <summary>
            Reset
            </summary>
            <returns>Success or not</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.GLBufferFactory">
            <summary>
            GLBufferFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBufferFactory.CreateVertex3(OpenTK.Vector3[])">
            <summary>
            Array of X,Y,Z vertex
            </summary>
            <param name="vertices"></param>
            <returns><c>GLVertex3Buffer</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBufferFactory.CreateVertexNormal3(OpenTK.Vector3[])">
            <summary>
            Array of X,Y,Z vertex
            </summary>
            <param name="vertexAndNormal">Array of X,Y,Z vertex + X,Y,Z normal</param>
            <returns><c>GLVertex3Normal3Buffer</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer">
            <summary>
            GLVertex3Buffer
            </summary>
            <remarks>
            (Float X,Y,Z + Texture X,Y) * 4
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.Texture">
            <summary>
            Texture
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.#ctor(System.String)">
            <summary>
            GLVertex3T2Buffer
            </summary>
            <param name="imageFileName">Image filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.#ctor(System.Drawing.Bitmap)">
            <summary>
            GLVertex3T2Buffer
            </summary>
            <param name="bitmap">Bitmap</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.Bind">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3T2Buffer.Render(OpenTK.Graphics.OpenGL.PrimitiveType)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Normal3Buffer">
            <summary>
            GLVertex3Normal3Buffer
            </summary>
            <remarks>
            (Float X,Y,Z + Normal X,Y,Z) * N
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Normal3Buffer.#ctor(OpenTK.Vector3[])">
            <summary>
            Array of (X,Y,Z vertex + X,Y,Z normal)
            </summary>
            <param name="vertexAndNormal">Array of X,Y,Z vertex + X,Y,Z normal</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Normal3Buffer.Render(OpenTK.Graphics.OpenGL.PrimitiveType)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Buffer">
            <summary>
            GLVertex3Buffer
            </summary>
            <remarks>
            Float X,Y,Z * N
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Buffer.#ctor(OpenTK.Vector3[])">
            <summary>
            Array of X,Y,Z vertex
            </summary>
            <param name="vertices"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLVertex3Buffer.Render(OpenTK.Graphics.OpenGL.PrimitiveType)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.ICamera">
            <summary>
            ICamera interface 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Position">
            <summary>
            Position (Eye) vector
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Up">
            <summary>
            Up vector
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Front">
            <summary>
            Front vector
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Right">
            <summary>
            Right vector
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.AspectRatio">
            <summary>
            Ratio of width/height 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Fov">
            <summary>
            Fov (projection)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.ViewMatrix">
            <summary>
            Calculated view-model (lookat) matrix
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.ProjectionMatrix">
            <summary>
            Calculated projection matrix
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Reset">
            <summary>
            Reset as default
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.LookAt(OpenTK.Vector3)">
            <summary>
            Move look at to target location
            </summary>
            <param name="target"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.LookAt(OpenTK.Vector3,SpiralLab.Sirius2.Winforms.IView)">
            <summary>
             Move look at to target location with smooth rendering
            </summary>
            <param name="target"></param>
            <param name="view"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.ZoomIn(System.Drawing.Point)">
            <summary>
            Zoom in
            </summary>
            <param name="p">Mouse location</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.ZoomOut(System.Drawing.Point)">
            <summary>
            Zoom out
            </summary>
            <param name="p">Mouse location</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.YawPitch(System.Int32,System.Int32)">
            <summary>
            Yaw pitch control by mouse location
            </summary>
            <param name="dx">Dx (pixel)</param>
            <param name="dy">Dy (pixel)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Upward">
            <summary>
            Keyboard W
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Downward">
            <summary>
            Keybaord S
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Leftward">
            <summary>
            Keybaord A
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ICamera.Rightward">
            <summary>
            Keybaord D
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera">
            <summary>
            StaticCamera
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Position">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Up">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Front">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Right">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Yaw">
            <summary>
            Rotate Look X
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Pitch">
            <summary>
            Rotate Look Y
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Fov">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.AspectRatio">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Sensitivity">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.ViewMatrix">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.ProjectionMatrix">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.#ctor(OpenTK.Vector3,System.Single)">
            <summary>
            Constructor
            </summary>
            <param name="position">Camera(or Eye) position</param>
            <param name="aspectRatio">Aspect ratio of width/height</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Reset">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.LookAt(OpenTK.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.LookAt(OpenTK.Vector3,SpiralLab.Sirius2.Winforms.IView)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.ZoomIn(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.ZoomOut(System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.YawPitch(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Upward">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Downward">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Leftward">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.StaticCamera.Rightward">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer">
            <summary>
            GLBuffer 
            </summary>
            <remarks>
            Represent for OpenGL's VBO, VAO
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Counts">
            <summary>
            Counts of vertices
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Vertices">
            <summary>
            Array of vertices
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Vbo">
            <summary>
            VBO handle
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Vao">
            <summary>
            VAO handle
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Bind">
            <summary>
            Bind
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.GLBuffer.Render(OpenTK.Graphics.OpenGL.PrimitiveType)">
            <summary>
            Draw array of vertices by assigned <c>PrimitiveType</c>
            </summary>
            <param name="primitiveType"><c>PrimitiveType</c></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.Shader">
            <summary>
            Shader
            </summary>
            <remarks>
            Shaders are written in GLSL, which is a language very similar to C in its semantics.<br/>
            The GLSL source is compiled *at runtime*, so it can optimize itself for the graphics card it's currently being used on.<br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.OpenGL.Shader.Handle">
            <summary>
            Program handle of shader
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.Shader._uniformLocations">
            <summary>
            Dictionary of uniforms 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="lineOfCodesVertex">Line of codes for vertex shader</param>
            <param name="lineOfCodesFrag">Line of codes for fragment shader</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.CompileShader(System.Int32)">
            <summary>
            Compile shader
            </summary>
            <param name="shader"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.LinkProgram(System.Int32)">
            <summary>
            Linke shader
            </summary>
            <param name="program"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.Use">
            <summary>
            Enables the shader program
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.GetAttribLocation(System.String)">
            <summary>
            The shader sources provided with this project use hardcoded layout(location)-s. If you want to do it dynamically,
            you can omit the layout(location=X) lines in the vertex shader, and use this in VertexAttribPointer instead of the hardcoded values.
            </summary>
            <param name="attribName">Attribute name from shader </param>
            <returns>Location of attribute</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetInt(System.String,System.Int32)">
            <summary>
            Set a uniform int on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetFloat(System.String,System.Single)">
            <summary>
            Set a uniform float on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetMatrix3(System.String,OpenTK.Matrix3)">
            <summary>
            Set a uniform Matrix3 on this shader
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
            <remarks>
              <para>
              The matrix is transposed before being sent to the shader.
              </para>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetMatrix4(System.String,OpenTK.Matrix4)">
            <summary>
            Set a uniform Matrix4 on this shader
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
            <remarks>
              <para>
              The matrix is transposed before being sent to the shader.
              </para>
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetVector2(System.String,OpenTK.Vector2)">
            <summary>
            Set a uniform Vector2 on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetVector3(System.String,OpenTK.Vector3)">
            <summary>
            Set a uniform Vector3 on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Shader.SetVector4(System.String,OpenTK.Vector4)">
            <summary>
            Set a uniform Vector4 on this shader.
            </summary>
            <param name="name">The name of the uniform</param>
            <param name="data">The data to set</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.ShaderFactory">
            <summary>
            ShaderFactory
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ShaderFactory.CreateShader2D">
            <summary>
            Shader for 2D
            </summary>
            <remarks>
            Vertex shader: <c>ShaderLineOfCodes.VertexShaderV3</c> <br/>
            Fragment shader: <c>ShaderLineOfCodes.FragmentShader</c><br/>
            </remarks>
            <returns><c>Shader</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ShaderFactory.CreateShader3D">
            <summary>
            Shader for 3D
            </summary>
            <remarks>
            Vertex shader: <c>ShaderLineOfCodes.VertexShaderV3N3</c> <br/>
            Fragment shader: <c>ShaderLineOfCodes.FragmentShaderLight</c><br/>
            </remarks>
            <returns><c>Shader</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ShaderFactory.CreateShaderTexture">
            <summary>
            Shader for texture
            </summary>
            <remarks>
            Vertex shader: <c>ShaderLineOfCodes.VertexShaderV3T2</c> <br/>
            Fragment shader: <c>ShaderLineOfCodes.FragmentShaderT2</c><br/>
            </remarks>
            <returns><c>Shader</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.ShaderFactory.CreateShaderLightning">
            <summary>
            Shader for lightning
            </summary>
            <remarks>
            Vertex shader: <c>ShaderLineOfCodes.VertexShaderV3N3T2</c> <br/>
            Fragment shader: <c>ShaderLineOfCodes.FragmentShaderLight2</c><br/>
            </remarks>
            <returns><c>Shader</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes">
            <summary>
            Line of codes for shader
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.VertexShaderV3">
            <summary>
            VertexShaderV3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.VertexShaderV3N3">
            <summary>
            VertexShaderV3N3
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.VertexShaderV3T2">
            <summary>
            VertexShaderV3T2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.VertexShaderV3N3T2">
            <summary>
            VertexShaderV3N3T2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.FragmentShader">
            <summary>
            FragmentShader
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.FragmentShaderT2">
            <summary>
            FragmentShaderT2
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.FragmentShaderLight">
            <summary>
            FragmentShaderLight
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.ShaderLineOfCodes.FragmentShaderLight2">
            <summary>
            FragmentShaderLight2
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenGL.Texture">
            <summary>
            Texture 
            </summary>
            <remarks>
            A helper class, much like Shader, meant to simplify loading textures.
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Handle">
            <summary>
            Handle id
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Width">
            <summary>
            Width (px)
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Height">
            <summary>
            Height (py)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.LoadFromFile(System.String)">
            <summary>
            Load texture from file
            </summary>
            <param name="path">Path to file</param>
            <returns><c>Texture</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Load(System.Drawing.Bitmap)">
            <summary>
            Load texture from bitmap
            </summary>
            <param name="bitmap"><c>Bitmap</c></param>
            <returns><c>Texture</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="glHandle">Texture handle</param>
            <param name="width">Width (px)</param>
            <param name="height">Height (py)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenGL.Texture.Use(OpenTK.Graphics.OpenGL.TextureUnit)">
            <summary>
            Use
            </summary>
            <remarks>
            Activate texture
            Multiple textures can be bound, if your shader needs more than just one.
            If you want to do that, use GL.ActiveTexture to set which slot GL.BindTexture binds to.
            The OpenGL standard requires that there be at least 16, but there can be more depending on your graphics card.
            </remarks>
            <param name="unit"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Config">
            <summary>
            Configuration for <c>SpiralLab.Sirius2.Winforms</c> library
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.AssemblyName">
            <summary>
            Package assembly filename
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileExtension">
            <summary>
            Default file extensinn
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileOpenFilters">
            <summary>
            Open file filters
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileSaveFilters">
            <summary>
            Open file filters
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileImportImageFilters">
            <summary>
            Import image file filter
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileImportModelFilters">
            <summary>
            Import model file filter
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileMeasurementFilter">
            <summary>
            Measurement file filters
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileHeaderBytes">
            <summary>
            Default file header bytes
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.FileHeaderData">
            <summary>
            Default file header data
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.FileKnownTypes">
            <summary>
            Type of internal objects at file 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.PensColor">
            <summary>
            Array of Pen colors
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnCreatePen">
            <summary>
            Event for create pen entity
            </summary>
            <remarks>
            Create pen entity when initialize
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyCreatePen(System.Drawing.Color)">
            <summary>
            Notify create <c>IPen</c> entity
            </summary>
            <param name="color"></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.PenReset(System.Drawing.Color,SpiralLab.Sirius2.Winforms.Entity.EntityPen@)">
            <summary>
            Reset <c>EntityPen</c> values when created
            </summary>
            <param name="color"><c>System.Drawing.Color</c></param>
            <param name="pen"><c>EntityPen</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.FontInstalledNames">
            <summary>
            List of font names
            </summary>
            <remarks>
            Installed font list at current owner windows system
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ImageTextClearColor">
            <summary>
            Clear color for <c>EntityImageText</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ImageTextFillBrush">
            <summary>
            Fill color for <c>EntityImageText</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ImageTextPenColor">
            <summary>
            Pen color for <c>EntityImageText</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ImageTextRenderingHint">
            <summary>
            Rendering hint for <c>EntityImageText</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ImageTextSmoothingMode">
            <summary>
            Smoothing mode hint for <c>EntityImageText</c>
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnTextConvert">
            <summary>
            Event handler to convert <c>ITextConvertible.Text</c> to <c>ITextConvertible.TextConverted</c>
            <code>
            SpiralLab.Sirius2.Winforms.Config.OnTextConvert += Text_OnTextConvert;
            
            private bool Text_OnTextConvert(IMarker marker, ITextConvertible textConvertible)
            {
                var entity = textConvertible as IEntity;
                if (entity.Name == "TextEntityName1")
                {
                    // Example for "yyyyMMdd HH:mm:ss"
                    textConvertible.ConvertedText = DateTime.Now.ToString(textConvertible.SourceText); 
                }                
                return true;
            }
            </code>
            </summary>
            <remarks>
            If <c>ITextConvertable.IsConvertText</c> is <c>True</c>, <c>Config.OnTextConvert</c> event would be fired
            </remarks>        
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyTextConvert(SpiralLab.Sirius2.Winforms.Marker.IMarker,SpiralLab.Sirius2.Winforms.Entity.ITextConvertible)">
            <summary>
            Notify for TextConvert
            </summary>
            <remarks>
            If <c>ITextConvertable.IsConvertText</c> is <c>True</c>, it would be try to convert every <c>IMarkerable.Mark</c>.
            </remarks>
            <param name="marker"><c>IMarker</c></param>
            <param name="textConvertible"><c>ITextConvertible</c></param>
            <returns>Text has converted or not</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DxfSplineToPolygonalCounts">
            <summary>
            Divided line counts when convert dxf spline entity to lines
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsDxfImportRemovedColor">
            <summary>
            Remoe entity color when import dxf
            </summary>
            <remarks>
            If true, overrided color is PensColor[0] (White)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsDxfOpenRemovedColor">
            <summary>
            Remoe entity color when open dxf
            </summary>
            <remarks>
            If true, overrided color is PensColor[0] (White)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DxfTextEntityDefaultFont">
            <summary>
            Convert Text, MText entity at dxf file by assigned font.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.STLAlignZ">
            <summary>
            Z Alignment when loading STL file 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ExtractPointsCloudDirectionVector">
            <summary>
            Directional vector for  extract points cloud from STL mode
            </summary>
            <remarks>
            Default directional vector: 0,0,-1
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.TreeviewWarningNodeCounts">
            <summary>
            Occur warning message if treeview nodes counts excced this counts
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.TreeviewNodeDefaultFont">
            <summary>
            Default treeview node font
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.TreeviewNodeBoldFont">
            <summary>
            Bold treeview node font
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.TreeviewNodeStrikeOutFont">
            <summary>
            Strikeout treeview node font
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.TreeviewNodeBoldAndStrikeOutFont">
            <summary>
            Bold and Strikeout treeview node font
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnBlockInsert">
            <summary>
            Event handler for create custom array of <c>EntityBlockInsert</c> at <c>TreeViewUserControl</c>
            </summary>
            <remarks>
            If <c>ITextConvertable.IsConvertText</c> is <c>True</c>, <c>Config.OnTextConvert</c> event would be fired
            </remarks>        
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyBlockInsert(SpiralLab.Sirius2.Winforms.IDocument,SpiralLab.Sirius2.Winforms.Entity.EntityBlock)">
            <summary>
            Notify for TextConvert
            </summary>
            <remarks>
            If <c>ITextConvertable.IsConvertText</c> is <c>True</c>, it would be try to convert every <c>IMarkerable.Mark</c>.
            </remarks>
            <param name="document"><c>IDocument</c></param>
            <param name="block"><c>EntityBlock</c></param>
            <returns>Array of <c>EntityBlockInsert</c></returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DocumentDefaultViewFovSize">
            <summary>
            Editor view FOV area (WxH)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DocumentDefaultViewVirtualImageSize">
            <summary>
            Editor view virtual image field area (WxH)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DocumentColorBackgroundView">
            <summary>
            Color of background view 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorLight">
            <summary>
            Color of light
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorFov">
            <summary>
            Color of FOV
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorAxisX">
            <summary>
            Color of x axis 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorAxisY">
            <summary>
            Color of y axis 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorAxisZ">
            <summary>
            Color of z axis 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorDefaultEntity">
            <summary>
            Color of default entity 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorSelectedEntity">
            <summary>
            Color of selected entity 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorSelectedBBox">
            <summary>
            Color of bounding-box selected entity 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorGridPoints">
            <summary>
            Color of grid points
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorSimulationJumpRay">
            <summary>
            Color of jump ray when be simulating
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorSimulationMarkRay">
            <summary>
            Color of mark ray when be simulating
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorSimulationMarkPoint">
            <summary>
            Color of mark laser point when be simulating
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.DiameterOfMarkSphere">
            <summary>
            If mark laser spere, sizeof beam diameter
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ColorNormalVectorAtPointsCloud">
            <summary>
            Color of normal vectors at <c>EntityPointsCloud</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.ScaleNormalVectorAtPointsCloud">
            <summary>
            Scale of normal vector at <c>EntityPointsCloud</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.SizeofPointAndLineSelectedEntity">
            <summary>
            If entity has selected, override line width and point size 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsRenderBoundBoxWhenSelected">
            <summary>
            Is rendering bounding box of <c>IEntity</c> when selected
            </summary>
            <remarks>
            Activated only single entity has selected 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.HitTestByHotTracking">
            <summary>
            Pre Hittest when mouse is hovering over <c>IEntity</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.HitTestThresholdByPixel">
            <summary>
            Threshold pixel counts when hit testing         
            </summary>
            <remarks>
            Default: 4px
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsCameraMoveAtPropertyGrid">
            <summary>
            Move camera smoothly when <c>IEntity.In</c> or <c>IEntity.Out</c> has selected
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsCameraMoveWhenSimulation">
            <summary>
            Move camera smoothly when activated simulation 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardHelpMessage">
            <summary>
            Help messages at editor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardTransitXYCtrl">
            <summary>
            Transit by keyboard: CTRL
            </summary>
            <remarks>Default: 1 mm</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardTransitXYCtrlAlt">
             <summary>
             Transit by keyboard: CTRL + ALT
             </summary>
            <remarks>Default: 0.1 mm</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardTransitXYCtrlAltShift">
             <summary>
             Transit by keyboard: CTRL + ALT + SHIFT
             </summary>
            <remarks>Default: 0.01 mm</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardRotateCtrl">
            <summary>
            Rotate by keyboard: CTRL
            </summary>
            <remarks>Default: 90 deg</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardRotateCtrlAlt">
            <summary>
            Rotate by keyboard: CTRL + ALT
            </summary>
            <remarks>Default: 10 deg</remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.KeyboardRotateCtrlAltShift">
            <summary>
            Rotate by keyboard: CTRL + ALT+ SHIFT
            </summary>
            <remarks>Default: 1 deg</remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.DIN_RtcExtension1Port">
            <summary>
            D.Input name lists at RTC Extension1 Port 
            </summary>
            <remarks>
            16 bits
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.DIN_RtcLaserPort">
            <summary>
            D.Input name lists at RTC Laser Port 
            </summary>
            <remarks>
            2 bits
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.DOut_RtcExtension1Port">
            <summary>
            D.Output name lists at RTC Extension1 Port
            </summary>
            <remarks>
            16bits 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.DOut_RtcExtension2Port">
            <summary>
            D.Output name lists at RTC Extension2 Port 
            </summary>
            <remarks>
            8 bits 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.Config.DOut_RtcLaserPort">
            <summary>
            D.Output name lists at RTC Laser Port 
            </summary>
            <remarks>
            2 bits 
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnScannerFieldCorrection2D">
            <summary>
            Event for scanner field correction 2D
            <code>
            SpiralLab.Sirius2.Winforms.Config.OnScannerFieldCorrection2D += Config_OnScannerFieldCorrection2D;
            private RtcCorrection2D Config_OnScannerFieldCorrection2D(IRtc rtc)
            {
                // Create RtcCorrection2D by measured x,y error data
                int rows = 7;
                int cols = 7;
                float interval = 10.0f;
                var rtcCorrection2D = new RtcCorrection2D(rtc.KFactor, rows, cols, interval, interval, rtc.CorrectionFiles[(int)rtc.PrimaryHeadTable].FileName, string.Empty);
                float left = -interval * (float)(int)(cols / 2);
                float top = interval * (float)(int)(rows / 2);
                for (int row = 0; row &lt; rows; row++)
                {
                    for (int col = 0; col &lt; cols; col++)
                    {
                        rtcCorrection2D.AddRelative(row, col,
                            new System.Numerics.Vector2(left + col* interval, top - row* interval),
                            new System.Numerics.Vector2(errX, errY);
                        );
                    }
                }
                return rtcCorrection2D;
            }
            </code>
            </summary>
            <remarks>
            When select scanner field correction 2D at popup-menu item.
            User should be create <c>RtcCorrection2D</c> and return it.
            </remarks>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnScannerFieldCorrection3D">
            <summary>
            Event for scanner field correction 3D
            <code>
            SpiralLab.Sirius2.Winforms.Config.OnScannerFieldCorrection3D += Config_OnScannerFieldCorrection3D;
            private RtcCorrection3D Config_OnScannerFieldCorrection3D(IRtc rtc)
            {
                // Create RtcCorrection3D by measured x,y error data at z plane
                int rows = 3;
                int cols = 3;
                float zUpper = 20;
                float zLower = -20;
                float interval = 30;
                string sourceFile = rtc.CorrectionFiles[(int)rtc.PrimaryHeadTable].FileName
                string targetFile = string.Empty;
                float left = -interval * (float)(int)(cols / 2);
                float top = interval * (float)(int)(rows / 2);
                var correction3D = new RtcCorrection3D(seq.Rtc.KFactor, rows, cols, interval, zUpper, zLower, sourceFile, targetFile);
                for (int row = 0; row &lt; rows; row++)
                {
                    for (int col = 0; col &lt; cols; col++)
                    {
                        correction3D.AddRelative(row, col,
                            new Vector3( left + col* interval, top - row* interval, zLower),
                            new System.Numerics.Vector2(errX, errY, zLower)
                        );
                        correction3D.AddRelative(row, col,
                            new Vector3( left + col* interval, top - row* interval, zUpper),
                            new System.Numerics.Vector2(errX, errY, zUpper)
                        );
                    }
                }
                return correction3D;
            }
            </code>
            </summary>
            <remarks>
            When select scanner field correction 3D at popup-menu item.
            User should be create <c>RtcCorrection3D</c> and return it.
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyScannerFieldCorrection2D(SpiralLab.Sirius2.Scanner.IRtc)">
            <summary>
            Notify <c>RtcCorrection2D</c> for 2D scanner field correction
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <returns><c>RtcCorrection2D</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyScannerFieldCorrection3D(SpiralLab.Sirius2.Scanner.IRtc)">
            <summary>
            Notify <c>RtcCorrection3D</c> for 3D scanner field correction
            </summary>
            <param name="rtc"><c>IRtc</c></param>
            <returns><c>RtcCorrection3D</c></returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.PathOptimizerBasePosition">
            <summary>
            <c>PathOptimizerBasePositions</c> when optimize pathes
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.Config.OnOptimizePath">
            <summary>
            Event for optimize path winforms
            </summary>
            <remarks>
            Argument: Target <c>IEntity</c>
            Return: Sorted result orders
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.NotifyOptimizePath(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Notify optimize path
            </summary>
            <param name="entity"><c>IEntity</c></param>
            <returns>Array of path order</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.Config.PopupOptimizerWinForms(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Popup optimize winforms
            </summary>
             <param name="entity"><c>IEntity</c></param>
            <returns>Array of path order</returns>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.IsPathSortAndMerge">
            <summary>
            Enable sort and merge path or not
            </summary>
            <remarks>
            Calculated when importing hpgl(plt) or dxf file
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.PathSortAndMergeThreshold">
            <summary>
            Threshold distance for sort and merge path at <c>EntityGroup</c>
            </summary>
            <remarks>
            Used with <c>IsPathSortAndMerge</c> if True.
            Calculated when importing hpgl(plt) or dxf file.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Config.SamplePath">
            <summary>
            Sample file path
            </summary>
            <remarks>
            Default path: Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "sample")
            </remarks>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.IDocumentData">
            <summary>
            IDocumentData interface
            </summary>
            <remarks>
            Serialization for open/save internal data
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Description">
            <summary>
            Description
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.ExtensionData">
            <summary>
            Extension user data
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Blocks">
            <summary>
            List of <c>EntityBlock</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Layers">
            <summary>
            List of <c>EntityLayer</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Pens">
            <summary>
            List of <c>EntityPen</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocumentData.Tag">
            <summary>
            User data 
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.MarginAlignments">
            <summary>
            MarginAlignments
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.MarginAlignments.Left">
            <summary>
            Left
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.MarginAlignments.Right">
            <summary>
            Right
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.MarginAlignments.Bottom">
            <summary>
            Bottom
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.MarginAlignments.Top">
            <summary>
            Top
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.SimulationSpeed">
            <summary>
            Simulation speed
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.SimulationSpeed.Slow">
            <summary>
            Slow
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.SimulationSpeed.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.SimulationSpeed.Fast">
            <summary>
            Fast
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.IDocument">
            <summary>
            IDocument interface
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnNew">
            <summary>
            New event handler
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnOpened">
            <summary>
            Opened event handler (filename)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnSaved">
            <summary>
            Saved event handler (filename)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnAdd">
            <summary>
            Add event handler
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnInsert">
            <summary>
            Insert event handler (source, parent, index)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnRemove">
            <summary>
            Remove event handler 
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnSelected">
            <summary>
            Selected event handler (array of <c>IEntity</c>)
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.IDocument.OnPropertyChanged">
            <summary>
            Property value changed event handler
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.InternalData">
            <summary>
            <c>IDocumentData</c> internal data 
            <para>Real document data for open and save</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.Selected">
            <summary>
            Array of selected <c>IEntity</c>
            <para>Modified by <c>ActSelect</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.Clipboard">
            <summary>
            Array of <c>IEntity</c> at clipboard
            <para>Modified by <c>ActCopy</c> or <c>ActCut</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.EntityDic">
            <summary>
            Dictionary of <c>IEntity</c> 
            <para>Key: ID of <c>IEntity</c>, Value: <c>IEntity</c></para>
            <para>Add and Removed by internally</para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.PenDic">
            <summary>
            Dictionary of <c>EntityPen</c> 
            <para>Key: int value of <c>Color</c> (Convert <c>Color</c> value to <c>ToArgb</c>), Value: <c>EntityPen</c></para>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.ActiveLayer">
            <summary>
            Current(or working, activated) <c>EntityLayer</c> entity
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.IsModified">
            <summary>
            Internal data has modified or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.IsReady">
            <summary>
            Ready status
            <para>Used by internally (Do NOT edit)</para>
            </summary>
            <remarks>
            <c>IsReady</c> status goes to <c>False</c>.<br/> when opening or saving <c>IDocumentData</c> <br/>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IDocument.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActNew">
            <summary>
            New <c>IDocumentData.InternalData</c> and notify <c>OnNew</c> event 
            </summary>
            <remarks>
            <c>Clipboard</c> has cleared.<br/>
            Whole <c>IEntity</c> at <c>IDocumentData.Layers</c> has cleared and create a <c>EntityLayer</c> with name '0' by default. <br/>
            Whole <c>EntityBlock</c> at <c>IDocumentData.Blocks</c> has cleared. <br/>
            Whole <c>EntityPen</c> at <c>IDocumentData.Pens</c> has not changed. <br/>
            <c>EntityDic</c> has cleared.<br/>
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActOpen(System.String)">
            <summary>
            Opened <c>IDocumentData.InternalData</c> and notify <c>OnOpened</c> event 
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActImport(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <summary>
            Import file and notify <c>OnOAdd</c> event 
            </summary>
            <param name="fileName">Filename</param>
            <param name="entity">Imported <c>IEntity</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSave(System.String)">
            <summary>
            Saved <c>IDocument.InternalData</c> and notify <c>OnSaved</c> event 
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Add <c>IEntity</c> into <c>IDocument.InternalData</c> and notify <c>OnAdd</c> event 
            </summary>
            <param name="entity">Adding <c>IEntity</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Add array of <c>IEntity</c> into <c>IDocument.InternalData</c> and notify <c>OnAdd</c> event 
            </summary>
            <param name="entities">Array of <c>IEntity</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActInsert(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <summary>
            Insert <c>IEntity</c> at target index of <c>IEntity.Children</c> and notify <c>OnInsert</c> event 
            </summary>
            <param name="entity"><c>IEntity</c></param>
            <param name="parent">Parent <c>IEntity</c></param>
            <param name="targetIndex">Target index</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Remove <c>IEntity</c> from <c>IDocument.InternalData</c> and notify <c>NotifyRemove</c> event 
            </summary>
            <param name="entity">Target remove <c>IEntity</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Remove array of <c>IEntity</c> from <c>IDocument.InternalData</c> and notify <c>NotifyRemove</c> event 
            </summary>
            <param name="entities">Target array of <c>IEntity</c> to remove</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSelect(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Select <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>NotifySelected</c> event 
            </summary>
            <param name="entity">Target <c>IEntity</c> to select</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSelect(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Select array of <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>NotifySelected</c> event 
            </summary>
            <param name="entities">Target array of <c>IEntity</c> to select</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSelectClear">
            <summary>
            Clear selected array of <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>NotifySelected</c> event 
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActGroup(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Convert array of <c>IEntity</c> into <c>EntityGroup</c> at <c>IDocument.InternalData</c> and notify <c>OnAdd</c>, <c>NotifyRemove</c>
            </summary>
            <param name="entities">Target array of <c>IEntity</c> to create <c>EntityGroup</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActExplode(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Explode <c>IEntity</c> to seperated <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>OnAdd</c>, <c>NotifyRemove</c>
            </summary>
            <param name="entity">Target <c>Entity</c> to explode</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActHatch(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Hatch inside of <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>OnAdd</c> if succeed.
            </summary>
            <param name="entity">Target <c>IEntity</c> to hatch</param>
            <param name="hatchMode"><c>HatchModes</c></param>
            <param name="isZigZag">ZigZag</param>
            <param name="angle">Angle (1st)</param>
            <param name="angle2">Angle (2nd) For Cross line</param>
            <param name="interval">Interval (mm)</param>
            <param name="exclude">Exclude (mm)</param>
            <param name="shift">Shift (or offset) (mm)</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActReverse(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Reverse <c>IEntity</c> internal path order
            </summary>
            <param name="entity">Target <c>IEntity</c> to reverse</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActDivide(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Divide array of <c>IEntity</c> at <c>IDocument.InternalData</c> and notify <c>OnAdd</c> if succeed.
            </summary>
            <param name="entities">Target <c>Entity</c> to divide</param>
            <remarks>
            Not implemented(or supported) yet
            </remarks>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActCopy">
            <summary>
            Copy selected <c>IEntity</c>(or array of <c><c>IEntity</c></c>) into <c>Clipboard</c>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActCut">
            <summary>
            Cut selected <c>IEntity</c>(or array of <c>IEntity</c>) into <c>Clipboard</c>
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActPaste(System.Nullable{OpenTK.Vector3})">
            <summary>
            Paste <c>IEntity</c>(or array of <c><c>IEntity</c></c>) from <c>Clipboard</c>
            </summary>
            <param name="location">Paste x,y,z location (if <c>null</c>, cloned at same position)</param>
            <returns>Pasted array of <c>IEntity</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActAlignTo(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector3)">
            <summary>
            Align to x,y,z center array of <c>IEntity</c> at <c>IDocument</c>
            </summary>
            <param name="entities">Target <c>Entity</c> to align</param>
            <param name="center">Center x,y,z location</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActAlignTo(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector2)">
            <summary>
            Align to x,y center array of <c>IEntity</c> at <c>IDocument</c>
            </summary>
            <param name="entities">Target <c>Entity</c> to align</param>
            <param name="center">Center x,y location</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActAlign(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.MarginAlignments)">
            <summary>
            Align array of <c>IEntity</c> at margin alignment location
            </summary>
            <param name="entities">Target <c>Entity</c> to margin alignment</param>
            <param name="marginAlignment"><c>MarginAlignment</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActHitTest(SpiralLab.Sirius2.Winforms.IView,System.Windows.Forms.Keys,System.Drawing.Point)">
            <summary>
            Hit testing for <c>IDocument</c>
            </summary>
            <param name="view"><c>IView</c></param>
            <param name="keys">SHIFT:merge(+), CTRL:toggle(-,+), ALT:exclude(-)</param>
            <param name="p">Mouse click location</param>
            <returns>Counts of selected <c>IEntity</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActTransit(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector3)">
            <summary>
            Transit array of <c>IEntity</c> by delta distance
            </summary>
            <param name="entities">Array of <c>IEntity</c></param>
            <param name="delta">Dx, Dy, Dz (mm) </param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActPropertyChanged(SpiralLab.Sirius2.Winforms.Entity.IEntity[],System.String,System.Object,System.Object)">
            <summary>
            Property value of array of <c>IEntity</c> has changed
            </summary>
            <param name="entities">Array of <c>IEntity</c></param>
            <param name="propName">Property name</param>
            <param name="oldValue">Old value</param>
            <param name="newValue">New value</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActLayerDragMove(SpiralLab.Sirius2.Winforms.Entity.EntityLayer,SpiralLab.Sirius2.Winforms.Entity.EntityLayer,System.Int32)">
            <summary>
            Move <c>EntityLayer</c> by drag and drop at <c>TreeView</c> control
            </summary>
            <param name="sourceLayer">Source <c>EntityLayer</c></param>
            <param name="targetLayer">Target <c>EntityLayer</c></param>
            <param name="targetIndex">Target index</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActEntityDragMove(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <summary>
            Move <c>IEntity</c> by drag and drop at <c>TreeView</c> control
            </summary>
            <param name="entity">Source <c>IEntity</c></param>
            <param name="targetEntity">Target <c>IEntity</c></param>
            <param name="targetIndex">Target index</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActEntityDragMove(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <summary>
            Move array of <c>IEntity</c> by drag and drop at <c>TreeView</c> control
            </summary>
            <param name="entities">Source array of <c>IEntity</c></param>
            <param name="targetEntity">Target <c>IEntity</c></param>
            <param name="targetIndex">Target index</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActPointsCloudCalibration(SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud,SpiralLab.Sirius2.Scanner.IRtc,System.String@,System.String@,SpiralLab.Sirius2.Scanner.slcl_error_codes@)">
            <summary>
            Convert 3D scanner field correction by extract points cloud from <c>EntityPointsCloud</c> entity.
            </summary>
            <remarks>
            Input correction file: Used source correction file at <c>Rtc.CorrectionFiles[0].FileName</c>.<br/>
            Output correction file: If calibration had succeeded, correction table has load and selected by automatically at last table location.<br/>
            </remarks>
            <param name="entityPointsCloud">Target <c>EntityPointsCloud</c> entity</param>
            <param name="rtc"><c>IRtc</c></param>
            <param name="inputCtFileName">Input correction filename</param>
            <param name="newCtFileName">Created new correction filename if succeeded</param>
            <param name="returnCode">Error code if failed</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSimulateStart(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Winforms.SimulationSpeed)">
            <summary>
            Simulation start for array of <c>IEntity</c>
            </summary>
            <param name="entities">Target array of <c>IEntity</c></param>
            <param name="view">Target <c>IView</c></param>
            <param name="simulationSpeed"><c>SimulationSpeed</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.ActSimulateStop">
            <summary>
            Simulation stop
            </summary>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindByLayerName(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityLayer@)">
            <summary>
            Find <c>EntityLayer</c> entity by name
            </summary>
            <param name="layerName">Layer name</param>
            <param name="layer">Founded layer</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindByPenColor(System.Drawing.Color,SpiralLab.Sirius2.Winforms.Entity.EntityPen@)">
            <summary>
            Find <c>EntityPen</c> entity by <c>System.Drawing.Color</c>
            </summary>
            <param name="color">Pen color</param>
            <param name="pen">Founded pen</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindById(System.UInt32,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <summary>
            Find <c>IEntity</c> entity by <c>Entity.ID</c> at <c>IDocument</c> 
            </summary>
            <param name="entityId">ID of <c>IEntity</c></param>
            <param name="foundedEntity">Founded entit</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindByName(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <summary>
            Find <c>IEntity</c> entity by name at <c>IDocument</c> with recursively
            </summary>
            <param name="entityName">Entity name</param>
            <param name="foundedEntity">Founded entity</param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindBlockByName(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityBlock@)">
            <summary>
            Find <c>EntityBlock</c> entity by name
            </summary>
            <param name="blockName">Block name</param>
            <param name="block">Founded <c>EntityBlock</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.FindByType(System.Type,SpiralLab.Sirius2.Winforms.Entity.IEntity[]@)">
            <summary>
            Find entities by <c>Type</c> at <c>IDocument</c> with recursively
            </summary>
            <param name="entityType"><c>Type</c> of entity</param>
            <param name="foundedEntities">Array of <c>IEntity</c></param>
            <returns>Success or failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyNew">
            <summary>
            Notify new
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyOpened(System.String)">
            <summary>
            Notify <c>IDocumentData</c>  has opened
            </summary>
            <param name="fileName">Filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifySaved(System.String)">
            <summary>
            Notify <c>IDocumentData</c> has saved
            </summary>
            <param name="fileName">Filename</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Notify <c>IEntity</c> has added
            </summary>
            <param name="entity">Array of <c>IEntity</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyInsert(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <summary>
            Notify <c>IEntity</c> has insert (by drag move)
            </summary>
            <param name="entity"><c>IEntity</c></param>
            <param name="parent">Parent <c>IEntity</c></param>
            <param name="targetIndex">Target index</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Notify <c>IEntity</c> has removed
            </summary>
            <param name="entities">Array of <c>IEntity</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifySelected(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <summary>
            Notify array of <c>IEntity</c> has selected
            </summary>
            <param name="entities">Array of <c>IEntity</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IDocument.NotifyPropertyChanged">
            <summary>
            Notify <c>IEntity</c> property value has changed
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.DocumentData">
            <summary>
            DocumentData
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Description">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.ExtensionData">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Blocks">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Pens">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Layers">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData._Blocks">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData._Pens">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData._Layers">
            <summary>
            Used by internally (Do NOT edit)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentData.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentData.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentData.Clone">
            <summary>
            Implement clone of <c>DocumentData</c> 
            </summary>
            <remarks>Deep clone of <c>DocumentData</c> </remarks>
            <returns>Cloned <c>DocumentData</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.DocumentBase">
            <summary>
            DocumentBase
            </summary>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnNew">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnOpened">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnSaved">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnAdd">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnInsert">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnRemove">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnSelected">
            <inheritdoc/>
        </member>
        <member name="E:SpiralLab.Sirius2.Winforms.DocumentBase.OnPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.InternalData">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.Selected">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.Clipboard">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.EntityDic">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.PenDic">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.ActiveLayer">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.DocumentBase.activeLayer">
            <summary>
            Activated(or current) <c>EntityLayer</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.IsModified">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.IsReady">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.DocumentBase.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActNew">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActOpen(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActImport(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSave(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSetParentRecursively(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Set entity parent (recursively)
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActInsert(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSelect(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSelect(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSelectClear">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActGroup(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActExplode(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActDivide(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActHatch(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.HatchModes,System.Boolean,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActReverse(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActCopy">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActCut">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActPaste(System.Nullable{OpenTK.Vector3})">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActAlignTo(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActAlignTo(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector2)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActAlign(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.MarginAlignments)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActTransit(SpiralLab.Sirius2.Winforms.Entity.IEntity[],OpenTK.Vector3)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActHitTest(SpiralLab.Sirius2.Winforms.IView,System.Windows.Forms.Keys,System.Drawing.Point)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActPropertyChanged(SpiralLab.Sirius2.Winforms.Entity.IEntity[],System.String,System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActLayerDragMove(SpiralLab.Sirius2.Winforms.Entity.EntityLayer,SpiralLab.Sirius2.Winforms.Entity.EntityLayer,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActEntityDragMove(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActEntityDragMove(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSimulateStart(SpiralLab.Sirius2.Winforms.Entity.IEntity[],SpiralLab.Sirius2.Winforms.IView,SpiralLab.Sirius2.Winforms.SimulationSpeed)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActSimulateStop">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.ActPointsCloudCalibration(SpiralLab.Sirius2.Winforms.Entity.EntityPointsCloud,SpiralLab.Sirius2.Scanner.IRtc,System.String@,System.String@,SpiralLab.Sirius2.Scanner.slcl_error_codes@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindByLayerName(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityLayer@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindByPenColor(System.Drawing.Color,SpiralLab.Sirius2.Winforms.Entity.EntityPen@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindById(System.UInt32,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindByName(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindChildByName(System.String,SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity@)">
            <summary>
            Find child entity by recursively
            </summary>
            <param name="entityName"></param>
            <param name="entity"></param>
            <param name="foundedEntity"></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindByType(System.Type,SpiralLab.Sirius2.Winforms.Entity.IEntity[]@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindChildByType(System.Type,SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity[]@)">
            <summary>
            Find entity by <c>Type</c>
            </summary>
            <param name="entityType"></param>
            <param name="entity"></param>
            <param name="foundedEntities"></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.FindBlockByName(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityBlock@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyNew">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyOpened(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifySaved(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyAdd(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyInsert(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyRemove(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifySelected(SpiralLab.Sirius2.Winforms.Entity.IEntity[])">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentBase.NotifyPropertyChanged">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.DocumentSerializer">
            <summary>
            Serializer for SpiralLab.Sirius2 Document 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.OpenSirius(System.String,SpiralLab.Sirius2.Winforms.IDocument)">
            <summary>
            Open document from sirius2 file
            </summary>
            <param name="fileName">Filename</param>
            <param name="document">IDocument interface</param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.SaveSirius(SpiralLab.Sirius2.Winforms.IDocument,System.String)">
            <summary>
            Save document into sirius2 file
            </summary>
            <param name="document"></param>
            <param name="fileName"></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.OpenDxf(System.String,SpiralLab.Sirius2.Winforms.IDocument)">
            <summary>
            Open document from dxf file
            </summary>
            <param name="fileName"></param>
            <param name="document"></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.BeforeOpen(SpiralLab.Sirius2.Winforms.IDocument)">
            <summary>
            Prepare document before open
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.AfterOpen(SpiralLab.Sirius2.Winforms.IDocument)">
            <summary>
            Prepare document after open
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.ReverseUpdate(SpiralLab.Sirius2.Winforms.IDocument)">
            <summary>
            Reverse update to view 
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.ImportDxf(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityGroup@)">
            <summary>
            Import dxf file into document
            </summary>
            <remarks>
            Imported by <c>EntityGroup</c> entity
            </remarks>
            <param name="fileName">Filename</param>
            <param name="dxfEntity"><c>EntityGroup</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.DocumentSerializer.ImportHpgl(System.String,SpiralLab.Sirius2.Winforms.Entity.EntityGroup@)">
            <summary>
            Import plt(HPGL) file into document
            </summary>
            <remarks>
            Imported by <c>EntityGroup</c> entity
            </remarks>
            <param name="fileName">Filename</param>
            <param name="pltEntity"><c>EntityGroup</c></param>
            <returns>Success of failed</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.entity.control.controlbase">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Duty_cycle_DESC">
            <summary>
              Laser Input Duty cycle (%) (= Pulse width / Period * 100)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Duty_cycle_DISP">
            <summary>
              Duty cycle과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Frequency_DESC">
            <summary>
              Laser Input Frequency (Hz) (= 1 / Period)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Frequency_DISP">
            <summary>
              Frequency과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Jump_speed_DESC">
            <summary>
              Scanner Jump Speed (mm/s)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Jump_speed_DISP">
            <summary>
              Jump speed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Laser_C">
            <summary>
              Laser과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Mark_speed_DESC">
            <summary>
              Scanner Mark(or Arc) Speed (mm/s)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Mark_speed_DISP">
            <summary>
              Mark speed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power__Max__DESC">
            <summary>
              Laser Output Max. Power (W)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power__Max__DISP">
            <summary>
              Power (Max)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power_Category_DESC">
            <summary>
              PowerMap Category Name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power_Category_DISP">
            <summary>
              Power Category과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power_DESC">
            <summary>
              Laser Output Power (W)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Power_DISP">
            <summary>
              Power과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Pulse_width_DESC">
            <summary>
              Laser Input Pulse Width (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Pulse_width_DISP">
            <summary>
              Pulse width과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.controlbase.Scanner_C">
            <summary>
              Scanner과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.entity.control.pen">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Duty_cycle_DESC">
            <summary>
              Laser Input Duty cycle (%) (= Pulse width / Period * 100)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Duty_cycle_DISP">
            <summary>
              Duty cycle과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Frequency_DESC">
            <summary>
              Laser Input Frequency (Hz) (= 1 / Period)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Frequency_DISP">
            <summary>
              Frequency과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Jump_speed_DESC">
            <summary>
              Scanner Jump Speed (mm/s)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Jump_speed_DISP">
            <summary>
              Jump speed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Laser_C">
            <summary>
              Laser과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Mark_speed_DESC">
            <summary>
              Scanner Mark(or Arc) Speed (mm/s)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Mark_speed_DISP">
            <summary>
              Mark speed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power____DESC">
            <summary>
              Laser Output Power (%)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power____DISP">
            <summary>
              Power (%)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_Category_DESC">
            <summary>
              PowerMap Category Name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_Category_DISP">
            <summary>
              Power Category과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_Max__DESC">
            <summary>
              Laser Output Max. Power (W)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_Max__DISP">
            <summary>
              Power (Max)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_W__DESC">
            <summary>
              Laser Output Power (W)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Power_W__DISP">
            <summary>
              Power (W)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Pulse_width_DESC">
            <summary>
              Laser Input Pulse Width (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Pulse_width_DISP">
            <summary>
              Pulse width과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pen.Scanner_C">
            <summary>
              Scanner과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.entity.control.penrtc">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Angular_limit_DESC">
            <summary>
              Sky Writing Mode 3 Angular Limit (°)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Angular_limit_DISP">
            <summary>
              Angular limit과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.FPK_DESC">
            <summary>
              Laser First Pulse Killer (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.FPK_DISP">
            <summary>
              FPK과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Jump_delay_DESC">
            <summary>
              Scanner Jump Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Jump_delay_DISP">
            <summary>
              Jump delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Laser_C">
            <summary>
              Laser과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Laser_on_shift_DESC">
            <summary>
              Sky Writing Laser On Shift (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Laser_on_shift_DISP">
            <summary>
              Laser on shift과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Mark_delay_DESC">
            <summary>
              Scanner Mark Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Mark_delay_DISP">
            <summary>
              Mark delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Off_delay_DESC">
            <summary>
              Laser Off Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Off_delay_DISP">
            <summary>
              Off delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.On_delay_DESC">
            <summary>
              Laser On Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.On_delay_DISP">
            <summary>
              On delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Parallel_DESC">
            <summary>
              Wobbel Parallel/Longitudinal Size (mm)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Parallel_DISP">
            <summary>
              Parallel과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Perpendicular_DESC">
            <summary>
              Wobbel Perpendicular/Tansversal Size (mm)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Perpendicular_DISP">
            <summary>
              Perpendicular과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Polygon_delay_DESC">
            <summary>
              Scanner Polygon Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Polygon_delay_DISP">
            <summary>
              Polygon delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Polygon_edge_level_DESC">
            <summary>
              Scanner Polygon Variable Polygon Delay Edge Level (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Polygon_edge_level_DISP">
            <summary>
              Polygon edge level과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Post_DESC">
            <summary>
              Sky Writing Post (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Post_DISP">
            <summary>
              Post과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Prev_DESC">
            <summary>
              Sky Writing Prev (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Prev_DISP">
            <summary>
              Prev과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Q_switch_delay_DESC">
            <summary>
              Laser Q Switch Delay (usec). Used with YAG5 Laser Mode과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Q_switch_delay_DISP">
            <summary>
              Q switch delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Scanner__Variable__C">
            <summary>
              Scanner (Variable)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Scanner_C">
            <summary>
              Scanner과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Sky_writing_C">
            <summary>
              Sky Writing과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Sky_writing_enable_DESC">
            <summary>
              Enable/Disable Sky Wring과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Sky_writing_enable_DISP">
            <summary>
              SW Enable과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Sky_writing_mode_DESC">
            <summary>
              Sky Wring Mode 1,2,3과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Sky_writing_mode_DISP">
            <summary>
              Sky writing mode과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Time_lag_DESC">
            <summary>
              Sky Writing Time Lag (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Time_lag_DISP">
            <summary>
              Time lag과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_DESC">
            <summary>
              Enable/Disable Scanner Variable Jump Delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_DISP">
            <summary>
              Variable jump delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_length_DESC">
            <summary>
              Scanner Variable Jump Limit Length (mm)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_length_DISP">
            <summary>
              Variable jump delay length과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_min__time_DESC">
            <summary>
              Scanner Variable Min. Jump Delay (usec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_jump_delay_min__time_DISP">
            <summary>
              Variable jump delay min. time과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_polygon_delay_DESC">
            <summary>
              Enable/Disable Scanner Variable Polygon Delay By Angle (Scale(°) = 1 – Cos(°))과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Variable_polygon_delay_DISP">
            <summary>
              Variable polygon delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_C">
            <summary>
              Wobbel과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_enable_DESC">
            <summary>
              Enable/Disable Wobbel Shape과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_enable_DISP">
            <summary>
              Wobbel enable과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_frequency_DESC">
            <summary>
              Wobbel Frequency (Hz) (&gt;0 ClockWise, &lt;0.1/TrackingErr)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_frequency_DISP">
            <summary>
              Wobbel frequency과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_shape_DESC">
            <summary>
              Wobbel Shape과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.penrtc.Wobbel_shape_DISP">
            <summary>
              Wobbel shape과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.Approx_blend_limt_DESC">
            <summary>
              SyncAxis Approx  Blend Limt (mm)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.Approx_blend_limt_DISP">
            <summary>
              Approx  Blend Limt과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.Minimal_mark_speed_DESC">
            <summary>
              SyncAxis Min. Mark Speed (mm/sec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.Minimal_mark_speed_DISP">
            <summary>
              Minimal Mark Speed과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.SDC_suppress_delay_time_DESC">
            <summary>
              Suppress Spot Distance Control Delay Time (sec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.SDC_suppress_delay_time_DISP">
            <summary>
              SDC Delay과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.SDC_suppress_DESC">
            <summary>
              Suppress Spot Distance Control or Not과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.SDC_suppress_DISP">
            <summary>
              SDC Suppress과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.control.pensyncaxis.SyncAxis_C">
            <summary>
              SyncAxis과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.entity.entitybase">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Align_DESC">
            <summary>
              Translate for Alignment (mm) (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Align_DISP">
            <summary>
              Mode Align과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Alignment_DESC">
            <summary>
              Model X,Y,Z Alignment (mm) (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Alignment_DISP">
            <summary>
              Alignment과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Basic_C">
            <summary>
              Basic과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Color_DESC">
            <summary>
              Color of Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Color_DISP">
            <summary>
              Color과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Description_DESC">
            <summary>
              Description of Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Description_DISP">
            <summary>
              Description과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Entity_ID_DESC">
            <summary>
              Entity ID과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.HitTest_DESC">
            <summary>
              Is Hittest or Not과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.HitTest_DISP">
            <summary>
              HitTest과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.ID_DISP">
            <summary>
              ID과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Items_DESC">
            <summary>
              Counts of Child Entities과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Items_DISP">
            <summary>
              Items과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Mark_DESC">
            <summary>
              Is Mark or Not과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Mark_DISP">
            <summary>
              Mark과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Matrix_C">
            <summary>
              Matrix과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Model_DESC">
            <summary>
              Model 4x4 Matrix (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Model_DISP">
            <summary>
              Model Matrix과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Name_DESC">
            <summary>
              Name of Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Name_DISP">
            <summary>
              Name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Render_DESC">
            <summary>
              Is Render or Not과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Render_DISP">
            <summary>
              Render과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Rotate_DESC">
            <summary>
              Model Rotate X,Y,Z Angle (Degree) (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Rotate_DISP">
            <summary>
              Model Rotate과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Scale_DESC">
            <summary>
              Model Scale X,Y,Z (Default: 1) (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Scale_DISP">
            <summary>
              Model Scale과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Selected_DESC">
            <summary>
              Is Selected or Not과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Selected_DISP">
            <summary>
              Selected과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Status_C">
            <summary>
              Status과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Translate_DESC">
            <summary>
              Model Translate Position X,Y,Z (mm) (Align * Scale * Rotate * Transit)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.entity.entitybase.Translate_DISP">
            <summary>
              Model Translate과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenTKHelper">
            <summary>
            OpenTK Helper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.ScreenToWorldDistance(System.Drawing.Point,OpenTK.Vector3,OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Screen to world coordinate and calculate distance from test point
            </summary>
            <param name="mouseLocation">Mouse x,y (pixel)</param>
            <param name="testPoint">Target point (x,y,z)</param>
            <param name="modelView">Modelview matrix</param>
            <param name="projection">Project matrix</param>
            <returns>Distance</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.ScreenToWorldPlaneZIntersect(System.Drawing.Point,OpenTK.Vector3,OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Screen to world coordinate and intersecct z plane
            </summary>
            <param name="mouseLocation">Mouse x,y (pixel)</param>
            <param name="testPoint">Target point (x,y,z)</param>
            <param name="modelView">Modelview matrix</param>
            <param name="projection">Project matrix</param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.UnProject(System.Drawing.Point,OpenTK.Matrix4,OpenTK.Matrix4,OpenTK.Vector3@,OpenTK.Vector3@)">
            <summary>
            Screen to world coordinate and get near/far position
            </summary>
            <param name="mouseLocation">Mouse x,y (pixel)</param>
            <param name="modelView">Modelview matrix</param>
            <param name="projection">Project matrix</param>
            <param name="near">Camera near</param>
            <param name="far">Camera far</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.UnProject(OpenTK.Vector3,OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            Screen to world coordinate
            </summary>
            <param name="screenPosition"></param>
            <param name="modelView"></param>
            <param name="projection"></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.ClosestPoint(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Closest point from v at start -> end ray
            </summary>
            <param name="start">Start (or near)</param>
            <param name="end">End (or far)</param>
            <param name="v">Point (x,y,z)</param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.WorldToScreen(OpenTK.Vector3,OpenTK.Matrix4,OpenTK.Matrix4)">
            <summary>
            World to screen coordinate
            https://gamedev.stackexchange.com/questions/35263/converting-world-space-coordinate-to-screen-space-coordinate-and-getting-incorre
            </summary>
            <param name="worldPosition"></param>
            <param name="modelView"></param>
            <param name="projection"></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.PointToLineDistance(OpenTK.Vector3,OpenTK.Vector3,OpenTK.Vector3)">
            <summary>
            Shortest distance from point and line
            </summary>
            <param name="start">Line from</param>
            <param name="end">Line to</param>
            <param name="v">Point (x,y,z)</param>
            <returns>Distance</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKHelper.LoadMatrix(OpenTK.Matrix4@)">
            <summary>
            Load 4x4 matrix into GL context
            </summary>
            <param name="matrix"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenTKExtension">
            <summary>
            OpenTK extension
            <para>Convert type between System.Numerics and OpenTK</para>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToVector3(System.Drawing.Color)">
            <summary>
            System.Drawing.Color to OpenTK.Vector3
            </summary>
            <param name="color"><c>System.Drawing.Color </c></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToVector4(System.Drawing.Color)">
            <summary>
            System.Drawing.Color to OpenTK.Vector4
            </summary>
            <param name="color"><c>System.Drawing.Color </c></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToNumeric(OpenTK.Vector2)">
            <summary>
            OpenTK.Vector2 to System.Numerics.Vector2
            </summary>
            <param name="v"><c>OpenTK.Vector3</c></param>
            <returns><c>Vector2</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToOpenTK(System.Numerics.Vector2)">
            <summary>
            System.Numerics.Vector2 to OpenTK.Vector2
            </summary>
            <param name="v"><c>System.Numerics.Vector2</c></param>
            <returns><c>Vector2</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToNumeric(OpenTK.Vector3)">
            <summary>
            OpenTK.Vector3 to System.Numerics.Vector3
            </summary>
            <param name="v"><c>OpenTK.Vector3</c></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToOpenTK(System.Numerics.Vector3)">
            <summary>
            System.Numerics.Vector3 to OpenTK.Vector3
            </summary>
            <param name="v"><c>System.Numerics.Vector3</c></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToNumeric(OpenTK.Matrix4)">
            <summary>
            OpenTK.Matrix4 to System.Numerics.Matrix4x4
            </summary>
            <param name="m"><c>OpenTK.Matrix4</c></param>
            <returns><c>Matrix4x4</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.ToOpenTK(System.Numerics.Matrix4x4)">
            <summary>
            System.Numerics.Matrix3x2 to OpenTK.Matrix3
            </summary>
            <param name="m"><c>System.Numerics.Matrix4x4</c></param>
             <returns><c>Matrix4x4</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKExtension.RoundUp(OpenTK.Vector3,System.Int32)">
            <summary>
            Round up floating point
            </summary>
            <param name="v">OpenTK.Matrix3</param>
            <param name="decimals"></param>
            <returns><c>Vector3</c></returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.PropertyGridLocalizationAttribute">
            <summary>
            CEO Toughman by (c)Youngsoft
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.EnumHelper">
            <summary>
            Extract string from attribute Description of Enum 
            </summary>
            <remarks>
            [Description("??")] 
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.EnumHelper.GetDescription(System.Enum)">
            <summary>
            Get Description
            </summary>
            <param name="value"></param>
            <returns>String</returns>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.PenColorEditor">
            <summary>
            Pen color editor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.PenColorEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.PenColorEditor.PaintValue(System.Drawing.Design.PaintValueEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.PenColorEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.PenColorEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.AlignmentEditor">
            <summary>
            Alignment editor  by trackbar
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.AlignmentEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.AlignmentEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.ScaleEditor">
            <summary>
            Scale editor  by trackbar
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ScaleEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ScaleEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.RotateZEditor">
            <summary>
            Rotate z editor  by trackbar
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.RotateZEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.RotateZEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.FontNameEditor">
            <summary>
            Fontname (family) editor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontNameEditor.GetPaintValueSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontNameEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FontNameEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.HashCodeByPropertyExtensions">
            <summary>
            Hashcode helper (from properties)
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.PropertyGridHelper">
            <summary>
            PropertyGrid helper
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.PropertyGridHelper.PropertyBrowsable(System.Type,System.String,System.Boolean)">
            <summary>
            Browsable visible 
            </summary>
            <param name="type">Type</param>
            <param name="name">Property name</param>
            <param name="visible">visible or not</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.FloatTypeConverter">
            <summary>
            Double converter
            </summary>
            <remarks>
            Used with PropertyGrid
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FloatTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FloatTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.FloatTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenTKVector2Converter">
            <summary>
            OpenTKVector2 format converter
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector2Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector2Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector2Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenTKVector3Converter">
            <summary>
            OpenTKVector3 format converter
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector3Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector3Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector3Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.OpenTKVector4Converter">
            <summary>
            OpenTKVector4 format converter
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector4Converter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector4Converter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.OpenTKVector4Converter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.WriteDataExt16StringConverter">
             <summary>
            WriteDataExt16StringConverter
             </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.WriteDataExt16StringConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.WriteDataExt16StringConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.WriteDataExt16StringConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <inheritdoc/>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.marker.markerbase">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.AccumulatedMarks_DESC">
            <summary>
              Accumulated Mark Counts과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.AccumulatedMarks_DISP">
            <summary>
              Marks과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Basic_C">
            <summary>
              Basic과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Busy_DESC">
            <summary>
              Busy Status과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Busy_DISP">
            <summary>
              Busy과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Data_C">
            <summary>
              Data과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Entity_DESC">
            <summary>
              Current or Working Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Entity_DISP">
            <summary>
              Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Entity_Index_DESC">
            <summary>
              Current or Working Entity과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Entity_Index_DISP">
            <summary>
              Entity Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Error_DESC">
            <summary>
              Error Status과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Error_DISP">
            <summary>
              Error과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Index_DESC">
            <summary>
              Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Index_DISP">
            <summary>
              Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Jump_Origin_DESC">
            <summary>
              Jump to Origin Location After Finish to Mark과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Jump_Origin_DISP">
            <summary>
              Jump Origin과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Layer_DESC">
            <summary>
              Current or Working Layer과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Layer_DISP">
            <summary>
              Layer과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Layer_Index_DESC">
            <summary>
              Current or Working Layer Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Layer_Index_DISP">
            <summary>
              Layer Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.MarkTime_DESC">
            <summary>
              Mark Time Span (Start and End Mark Time)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.MarkTime_DISP">
            <summary>
              Mark Time과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Name_DESC">
            <summary>
              Name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Name_DISP">
            <summary>
              Name과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Offset_Index_DESC">
            <summary>
              Current or Working Offset Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Offset_Index_DISP">
            <summary>
              Offset Index과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Offsets_DESC">
            <summary>
              Array of Offset (Dx, Dy, Dz and Angle)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Offsets_DISP">
            <summary>
              Offsets과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Pen_Color_DESC">
            <summary>
              Current or Working Pen Color과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Pen_Color_DISP">
            <summary>
              Pen Color과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Ready_DESC">
            <summary>
              Ready Status과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Ready_DISP">
            <summary>
              Ready과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Status_C">
            <summary>
              Status과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Target_DESC">
            <summary>
              Mark Target과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Target_DISP">
            <summary>
              Target과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerbase.Working_C">
            <summary>
              Working과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.marker.markerrtc">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Check_C">
            <summary>
              Check과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Data_C">
            <summary>
              Data과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.External__START_DESC">
            <summary>
              Enable/Disable External /START Trigger과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.External__START_DISP">
            <summary>
              External /START과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.List_type_DESC">
            <summary>
              RTC List Type. Single buffer or Auto(or Double) buffer과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.List_type_DISP">
            <summary>
              List type과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.MaxMeasureTime_DESC">
            <summary>
              Max. Time to Measurement (sec)과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.MaxMeasureTime_DISP">
            <summary>
              Time과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Measurement_C">
            <summary>
              Measurement과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Plot_DESC">
            <summary>
              Plot as Graph After Finish to Mark. Create Measurement Begin, End Entities과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Plot_DISP">
            <summary>
              Plot과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Position_DESC">
            <summary>
              Check Scanner Position Acknowledge Status Before Start Mark과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Position_DISP">
            <summary>
              Position Ack과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Power_DESC">
            <summary>
              Check Scanner Power Ok Status Before Start Mark과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Power_DISP">
            <summary>
              Power Supply과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Session_DESC">
            <summary>
              Entity(MeasurementBegin) for Measurement Session과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Session_DISP">
            <summary>
              Session과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Temp_DESC">
            <summary>
              Check Scanner Temperature Ok Status Before Start Mark과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.marker.markerrtc.Temp_DISP">
            <summary>
              Temperature과(와) 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.Properties.Resources">
            <summary>
              지역화된 문자열 등을 찾기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Properties.Resources.ResourceManager">
            <summary>
              이 클래스에서 사용하는 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.Properties.Resources.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스 조회에 대해 현재 스레드의 CurrentUICulture 속성을
              재정의합니다.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.AboutForm">
            <summary>
            About winforms
            </summary>
            <remarks>
            Show version information
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AboutForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.AboutForm.CreateParams">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.AboutForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AboutForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AboutForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.HatchForm">
            <summary>
            Hatch winforms
            </summary>
            <remarks>
            User with create hatch patterns
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Mode">
            <summary>
            <c>HatchModes</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.IsZigZag">
            <summary>
            ZigZag
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Angle">
            <summary>
            Angle (1st)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Angle2">
            <summary>
            Angle2 (2nd: For Cross line)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Interval">
            <summary>
            Interval (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Shift">
            <summary>
            Shift (or offset) (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.HatchForm.Exclude">
            <summary>
            Exclude (mm)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.HatchForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.HatchForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.HatchForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.HatchForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.BlockForm">
            <summary>
            Block winforms
            </summary>
            <remarks>
            To create <c>EntityBlockInsert</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.BlockForm.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.BlockForm.SelectedBlock">
            <summary>
            Selected <c>EntityBlock</c>
            </summary>
            <remarks>
            It means MasterBlock
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.BlockForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.BlockForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.BlockForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.BlockForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.ImportForm">
            <summary>
            Import winforms
            </summary>
            <remarks>
            Used with import hpgl(plt), dxf, png, jpeg, ... files 
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImportForm.Entity">
            <summary>
            Imported <c>IEntity</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImportForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImportForm.DoRender">
            <summary>
            Do render <c>IView</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ImportForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImportForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImportForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.PathOptimizerBasePositions">
            <summary>
            Path Optimizer Base Positions
            </summary>
            <remarks>
            Configured <c>Config.PathOptimizerBasePosition</c> 
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PathOptimizerBasePositions.Center">
            <summary>
            Center 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PathOptimizerBasePositions.In">
            <summary>
            In
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PathOptimizerBasePositions.Out">
            <summary>
            Out
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm">
            <summary>
            PathOptimizer winforms
            </summary>
            <remarks>
            Extact <c>PathOptimizerBasePositions</c> position from <c>IEntity</c> and show it.
            Try to optimize path and show the results.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.OriginalLength">
            <summary>
            Original length
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.ResultLength">
            <summary>
            Result(sorted) length
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.ResultOrder">
            <summary>
            Result array of orders
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.Efficiency">
            <summary>
            Efficiency (higher than 100% or lower)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.IsFinished">
            <summary>
            Finished or not
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.#ctor(System.Collections.Generic.List{OpenTK.Vector2})">
            <summary>
            Constructor
            </summary>
            <param name="xyPosition">Array of X,Y locations</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.ComputeEuclideanDistanceMatrix(System.Int32[0:,0:]@)">
            <summary>
            Euclidean distance implemented as a callback. 
            It uses an array of positions and computes the Euclidean distance between the two positions of two different indices.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.NearestPoint(OpenTK.Vector2,System.Collections.Generic.List{System.ValueTuple{OpenTK.Vector2,System.Int32}})">
            <summary>
            점 배열에서 현재 점과 가장 가까운 점 찾아 인덱스 위치 리턴
            이전 점들의 진행 방향(normal) 각도를 구해서 중복된 최단점이 있을때 각도 변화량이 가장 작은것을 찾는 방식
            </summary>
            <param name="pt"></param>
            <param name="map"></param>
            <returns>Index of near point ?</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.SortByDistance(OpenTK.Vector2,System.Collections.Generic.List{System.ValueTuple{OpenTK.Vector2,System.Int32}})">
            <summary>
            최단점 검색 알고리즘
            </summary>
            <param name="from"></param>
            <param name="lst"></param>
            <returns></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.SimpleSort(System.Object)">
            <summary>
            상하좌우, 최단거리 와 같이 단순 알고리즘을 기반으로 동작
            </summary>
            <param name="tag"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PathOptimizerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.ArrayForm">
            <summary>
            Array winforms
            </summary>
            <remarks>
            Used when paste array of <c>IEntity</c> from clipboard
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.RowPitch">
            <summary>
            Row pitch
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.ColPitch">
            <summary>
            Col pitch
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.Rows">
            <summary>
            Rows
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.Cols">
            <summary>
            Cols
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.IsZigZag">
            <summary>
            Zigzag or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.BaseX">
            <summary>
            Base x 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.BaseY">
            <summary>
            Base y
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.Calcuated">
            <summary>
            Calculate(or create) array of <c>Offset</c> 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ArrayForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ArrayForm.CreateParams">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ArrayForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ArrayForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ArrayForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.ImageTextForm">
            <summary>
            ImageText winforms
            </summary>
            <remarks>
            <c>ImageText</c> by bitmap image for raster(or bitmap) operations
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.FontName">
            <summary>
            Font name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.HeightPixel">
            <summary>
            Height pixel
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.ImageText">
            <summary>
            Text
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.Style">
            <summary>
            Font style
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.IsFill">
            <summary>
            Is Fill 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.OutlinePixel">
            <summary>
            Outline pixel
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ImageTextForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm">
            <summary>
            Create grids winform
            </summary>
            <remarks>
            Create grid patterns for scanner field correction
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.FieldSize">
            <summary>
            Field size (mm)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.RowsCols">
            <summary>
            Row (or col) counts
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.Interval">
            <summary>
            Interval (mm)
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.CreateParams">
            <inheritdoc/>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.CreateGridsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.LicenseForm">
            <summary>
            License winforms
            </summary>
            <remarks>
            Show license information
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LicenseForm.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.LicenseForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LicenseForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LicenseForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.MessageBox">
            <summary>
            MessageBox winforms
            </summary>
            <remarks>
            Custom message box
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.MessageBox.TextLabel">
            <summary>
            <c>TextBoxWithLabel</c> for input values
            </summary>
            <remarks>
            Visibility : False (by default)
            </remarks>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MessageBox.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MessageBox.#ctor(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Constructor
            </summary>
            <param name="message">Message</param>
            <param name="title">Title</param>
            <param name="buttons"><c>MessageBoxButtons</c></param>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.MessageBox.CreateParams">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MessageBox.Show(System.String,System.String,System.Windows.Forms.MessageBoxButtons)">
            <summary>
            Show Dialog
            </summary>
            <param name="message">Message</param>
            <param name="title">Title</param>
            <param name="buttons"><c>MessageBoxButtons</c></param>
            <returns><c>DialogResult</c></returns>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.MessageBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MessageBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MessageBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl">
            <summary>
            OffsetUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl.Marker">
            <summary>
            <c>IMarker</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.OffsetUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl">
            <summary>
            MarkerUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.Marker">
            <summary>
            <c>IMarker</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.BtnStart_Click(System.Object,System.EventArgs)">
            <summary>
            Event for start button has clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.BtnStop_Click(System.Object,System.EventArgs)">
            <summary>
            Event for stop button has clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.BtnReset_Click(System.Object,System.EventArgs)">
            <summary>
            Event for reset button has clicked
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.MarkerUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.LogUserControl">
            <summary>
            LogUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.LogUserControl.MaxItems">
            <summary>
            Max log items
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LogUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LogUserControl.OnLogged(SpiralLab.Sirius2.Logger.Type,System.String)">
            <summary>
            Log event callback
            </summary>
            <param name="type"><c>Logger.Type</c></param>
            <param name="message">Message</param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.LogUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LogUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LogUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RtcUserControl">
            <summary>
            RtcUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RtcUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.PenUserControl">
            <summary>
            PenUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PenUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PenUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PenUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PenUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PenUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.LaserUserControl">
            <summary>
            LaserUserControl 
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.LaserUserControl.Laser">
            <summary>
            <c>ILaser</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LaserUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.LaserUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LaserUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.LaserUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl">
            <summary>
            RtcDOUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.DOExt1">
            <summary>
            Rtc Extension1 Port <c>IDOutput</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.DOExt2">
            <summary>
            Rtc Extension2 Port <c>IDOutput</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.DOLaserPort">
            <summary>
            Rtc Laser Port <c>IDOutput</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.UpdateExtension1PortNames(System.String[])">
            <summary>
            Update DIO names
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.UpdateExtension2PortNames(System.String[])">
            <summary>
            Update DIO names
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.UpdateLaserPortNames(System.String[])">
            <summary>
            Update DIO names
            </summary>
            <param name="names"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDOUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl">
            <summary>
            RtcDIUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.DIExt1">
            <summary>
            Rtc Extension1 Port <c>IDInput</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.DILaserPort">
            <summary>
            Rtc Laser Port <c>IDInput</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.UpdateExtension1PortNames(System.String[])">
            <summary>
            Update DIO names
            </summary>
            <param name="names"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.UpdateLaserPortNames(System.String[])">
            <summary>
            Update DIO names
            </summary>
            <param name="names"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcDIUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RotateForm">
            <summary>
            Rotate winforms
            </summary>
            <remarks>
            Used to calculate <c>ModelRotate</c> at <c>IEntity</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RotateForm.Angle">
            <summary>
            Angle for x,y,z axis
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RotateForm.#ctor(SpiralLab.Sirius2.Winforms.Entity.IEntity,OpenTK.Vector3,System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Constructor
            </summary>
            <param name="entity">Target <c>IEntity</c></param>
            <param name="rotate"> Angle for x,y,z axis</param>
            <param name="wfes"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RotateForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RotateForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RotateForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.AlignmentForm">
            <summary>
            Alignment winforms
            </summary>
            <remarks>
            Set <c>Alignments</c> value for <c>IEntity</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.Alignment">
            <summary>
            <c>Alignments</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.OldAlignment">
            <summary>
            Old <c>Alignments</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.entity">
            <summary>
            Target <c>IEntity</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.#ctor(SpiralLab.Sirius2.Winforms.Entity.IEntity,SpiralLab.Sirius2.Winforms.Entity.Alignments,System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Constructor
            </summary>
            <param name="entity">Target <c>IEntity</c></param>
            <param name="alignment"><c>Alignment</c></param>
            <param name="wfes"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.AlignmentForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.ScaleForm">
            <summary>
            Scale winforms
            </summary>
            <remarks>
            Used to calculate <c>ModelScale</c> at <c>IEntity</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.ScaleForm.ModelScale">
            <summary>
            Scale 
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ScaleForm.oldScale">
            <summary>
            Old scale
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ScaleForm.entity">
            <summary>
            Target entity
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ScaleForm.#ctor(SpiralLab.Sirius2.Winforms.Entity.IEntity,System.Double,System.Windows.Forms.Design.IWindowsFormsEditorService)">
            <summary>
            Constructor
            </summary>
            <param name="entity">Target <c>IEntity</c></param>
            <param name="scale">Model scale value</param>
            <param name="wfes"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.ScaleForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ScaleForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.ScaleForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl">
            <summary>
            PropertyGridUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.View">
            <summary>
            <c>IView</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.SelecteObject">
            <summary>
            Assigned object at propertygrid 
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.PropertyGridUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm">
            <summary>
            RtcCorrection2D winforms
            </summary>
            <remarks>
            Used to scnner field correction
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.Rtc">
            <summary>
            <c>IRtc </c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.RtcCorrection">
            <summary>
            <c>RtcCorrection2D</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.#ctor(SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Scanner.RtcCorrection2D)">
            <summary>
            Constructor
            </summary>
            <param name="rtc"><c>SpiralLab.Sirius2.Scanner.IRtc</c></param>
            <param name="rtcCorrection"><c>SpiralLab.Sirius2.Scanner.RtcCorrection2D</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.RefreshData">
            <summary>
            Refresh DataGridView
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection2DForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm">
            <summary>
            RtcCorrection3D winforms
            </summary>
            <remarks>
            Used to scnner field correction
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.RtcCorrection">
            <summary>
            <c>RtcCorrection3D</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.#ctor(SpiralLab.Sirius2.Scanner.IRtc,SpiralLab.Sirius2.Scanner.RtcCorrection3D)">
            <summary>
            Constructor
            </summary>
            <param name="rtc"><c>SpiralLab.Sirius2.Scanner.IRtc</c></param>
            <param name="rtcCorrection"><c>SpiralLab.Sirius2.Scanner.RtcCorrection3D</c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.RefreshDataLower">
            <summary>
            Refresh Lower DataGridView
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.RefreshDataUpper">
            <summary>
            Refresh Upper DataGridView
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.RtcCorrection3DForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.EditorUserControl">
            <summary>
            EditorUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.View">
            <summary>
            <c>IView</c> 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.components">
            <summary>
            필수 디자이너 변수입니다.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.Dispose(System.Boolean)">
            <summary>
            사용 중인 모든 리소스를 정리합니다.
            </summary>
            <param name="disposing">관리되는 리소스를 삭제해야 하면 true이고, 그렇지 않으면 false입니다.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.EditorUserControl.InitializeComponent">
            <summary>
            디자이너 지원에 필요한 메서드입니다. 
            이 메서드의 내용을 코드 편집기로 수정하지 마세요.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl">
            <summary>
            SiriusEditorUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.TitleName">
            <summary>
            Title name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.Laser">
            <summary>
            <c>ILaser</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.Marker">
            <summary>
            <c>IMarker</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.View">
            <summary>
            <c>IView</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.TreeViewCtrl">
            <summary>
            Usercontrol for Treeview
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.TreeViewBlockCtrl">
            <summary>
            Usercontrol for Treeview with block
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.PropertyGridCtrl">
            <summary>
            Usercontrol for propertygrid
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.EditorCtrl">
            <summary>
            Usercontrol for editor
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.PenCtrl">
            <summary>
            Usercontrol for pen
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.LaserCtrl">
            <summary>
            Usercontrol for laser
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.RtcCtrl">
            <summary>
            Usercontrol for rtc
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.MarkerCtrl">
            <summary>
            Usercontrol for marker
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.OffsetCtrl">
            <summary>
            Usercontrol for offset
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.RtcDICtrl">
            <summary>
            Usercontrol for DI
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.RtcDOCtrl">
            <summary>
            Usercontrol for DO
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.LogCtrl">
            <summary>
            Usercontrol for log
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)">
            <summary>
            Short cut keys for F5, CTRL+F5, F6
            </summary>
            <param name="msg"></param>
            <param name="keyData"></param>
            <returns>ProcessCmdKey return</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.DoRender">
            <summary>
            Do <c>IView</c> render
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.SiriusEditorUserControl.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.TextBoxWithLabel">
            <summary>
            TextBoxWithLabel
            </summary>
            <remarks>
            Control for <c>TextBox</c> + <c>Label</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TextBoxWithLabel.LabelText">
            <summary>
            Text
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TextBoxWithLabel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TextBoxWithLabel.OnResize(System.EventArgs)">
            <summary>
            Raises the System.Windows.Forms.Control.Resize event.
            </summary>
            <param name="e">An System.EventArgs that contains the event data.</param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl">
            <summary>
            TreeViewBlockUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms.
            Used to show <c>IDocument.Blocks</c> at <c>TreeView</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.View">
            <summary>
            <c>IView</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.TreeviewPopulate">
            <summary>
            Populate treeview higher level (layer) by assigned <c>IDocument</c>
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewBlockUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl">
            <summary>
            TreeViewUserControl
            </summary>
            <remarks>
            User can insert(or create) usercontrol at own winforms.
            Used to show <c>IDocument.Layers</c> at <c>TreeView</c>
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.Document">
            <summary>
            <c>IDocument</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.Rtc">
            <summary>
            <c>IRtc</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.View">
            <summary>
            <c>IView</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.TreeviewPopulate">
            <summary>
            Populate treeview higher level (layer) by assigned <c>IDocument</c>
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.TreeviewPopulate(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Populate treenode by parent of entity
            </summary>
            <param name="parentEntity"></param>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.UI.TreeViewUserControl.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.MultiSelectTreeview">
            <summary>
            ref: https://www.codeproject.com/Articles/20581/Multiselect-Treeview-Implementation
            revisied by hcchoi@spirallab.co.kr
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.UI.EmptyTreeNode">
            <summary>
            For Empty Tree Node
            Expand/collapse when +- icon has clicked
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.STLHelper">
            <summary>
            STLHelper
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.ViewModes">
            <summary>
            ViewModes
            </summary>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.ViewModes.Entity">
            <summary>
            Edit for Entity and Layers
            </summary>
            <remarks>
            Default
            </remarks>
        </member>
        <member name="F:SpiralLab.Sirius2.Winforms.ViewModes.Block">
            <summary>
            Edit for Block
            </summary>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.IView">
            <summary>
            IView interface
            </summary>
            <remarks>
            Handle user events likes keybaord, mouse.
            Render <c>IEntity</c> to display.
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.Document">
            <summary>
            <c>IDocument</c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.ViewMode">
            <summary>
            <c>ViewModes</c>
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.Renderer">
            <summary>
            <c>OpenTK.GLControl</c>
            </summary>
            <remarks>
            v3.3.3 only
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.Camera">
            <summary>
            <c>ICamera</c> interface
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.RenderTime">
            <summary>
            Render time (msec)
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.IsRenderDragging">
            <summary>
            Is dragging entities or not
            </summary>
            <remarks>
            Used by internally
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.HitTestRealThreshold">
            <summary>
            Calculated real threshold distance(mm) when hit testing by <c>HitTestThresholdByPixel</c> 
            </summary>
            <remarks>
            Recalculated every hit testing (Used by internally)
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.HitTestThreshold">
            <summary>
            Threshold distance(mm) when hit testing by <c>HitTestThresholdByPixel</c> 
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.IView.Tag">
            <summary>
            User data
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.Render">
            <summary>
            Render view
            </summary>
            <remarks>
            Do render whenever need to invalidate
            </remarks>
            <returns>Render time (msec)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.Dp2Lp(System.Drawing.Point,System.Double@,System.Double@)">
            <summary>
            Convert device to logical coordinate
            <para>Physical(or Device) coordinate to user coordinate system</para>
            </summary>
            <param name="p">Pixel (px)</param>
            <param name="x">Logical x (mm)</param>
            <param name="y">Logical y (mm)</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.Dp2Lp(System.Int32)">
            <summary>
            Convert device to logical length
            </summary>
            <param name="pixel">Pixel (length)</param>
            <returns>Logical length (mm)</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnLoad(System.Object,System.EventArgs)">
            <summary>
            To implement OnLoad event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnResized(System.Object,System.EventArgs)">
            <summary>
            To implement OnResized event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            To implement OnMouseDown event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            To implement OnMouseUp event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            To implement OnMouseMove event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            To implement OnMouseWheel event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnPreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <summary>
            To implement OnPreviewKeyDown event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            To implement OnKeyPress event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
             To implement OnKeyDown event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.IView.OnKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
             To implement OnKeyUp event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SpiralLab.Sirius2.Winforms.ViewBase">
            <summary>
            ViewBase
            </summary>
            <remarks>
            View base version
            </remarks>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Name">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Document">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.ViewMode">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Camera">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.RenderTime">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Renderer">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Shader2D">
            <summary>
            Shader 2D
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Shader3D">
            <summary>
            Shader 3D
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.ShaderTexture">
            <summary>
            Shader Texture
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.ShaderLightning">
            <summary>
            Shader Lightning
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.IsRenderDragging">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.IsRenderDraggingTest">
            <summary>
            Is dragging test has started or not
            </summary>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.HitTestRealThreshold">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.HitTestThreshold">
            <inheritdoc/>
        </member>
        <member name="P:SpiralLab.Sirius2.Winforms.ViewBase.Tag">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.#ctor(System.String,OpenTK.GLControl)">
            <summary>
            Constructor
            </summary>
            <param name="name">Name</param>
            <param name="glControl"><c>OpenTK.GLControl </c></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Dispose(System.Boolean)">
            <summary>
            Dispose internal resources
            </summary>
            <param name="disposing">Explicit dispose or not</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.ToString">
            <summary>
            Represent for <c>IView</c>
            </summary>
            <returns>Description for <c>IView</c></returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Dp2Lp(System.Drawing.Point,System.Double@,System.Double@)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Dp2Lp(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnLoad(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnResized(System.Object,System.EventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnMouseDown(System.Object,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnMouseUp(System.Object,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnMouseMove(System.Object,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnPreviewKeyDown(System.Object,System.Windows.Forms.PreviewKeyDownEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnKeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.Render">
            <inheritdoc/>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.OnRender">
            <summary>
            Draw entities
            </summary>
            <returns>Render time</returns>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.SetOrthographicProjection">
            <summary>
            As orthographic projection
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.SetPerspectiveProjection">
            <summary>
            As perspective projection
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawBoundingBox(SpiralLab.Sirius2.Winforms.Entity.IEntity)">
            <summary>
            Draw bounding box
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawAxes(OpenTK.Matrix4,System.Single)">
            <summary>
            Draw x,y,z axes at assigned model matrix
            </summary>
            <param name="modelMatrix">Model matrix</param>
            <param name="unscaledSize">unscaled size</param>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawDragging">
            <summary>
            Draw dragging entities
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawLayers">
            <summary>
            Draw layers
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawBlocks">
            <summary>
            Draw blocks
            </summary>
        </member>
        <member name="M:SpiralLab.Sirius2.Winforms.ViewBase.DrawBoundingBox">
            <summary>
            Draw bounding box
            </summary>
        </member>
        <member name="T:Accord.Controls.Chart">
            <summary>
            Chart control.
            </summary>
            
            <remarks>
            <para>
              Note: The Chart class came from the AForge.NET Framework, from a time when better charting
              solutions were not really available for the .NET Framework. This class is mainly intended to 
              support applications that had already been written using AForge.NET and that would benefit from 
              porting over to Accord.NET.</para>
            <para>
              At this time, if you need support for advanced charts in your application, it is recommended 
              to use a more complete charting solution for .NET such as <a href="https://www.nuget.org/packages/ZedGraph/">
              ZedGraph</a> or <a href="https://code.msdn.microsoft.com/Samples-Environments-for-b01e9c61">Microsoft's
              own charting controls</a>.
            </para>
            </remarks>
            
        </member>
        <member name="T:Accord.Controls.Chart.SeriesType">
            <summary>
            Chart series type enumeration.
            </summary>
        </member>
        <member name="F:Accord.Controls.Chart.SeriesType.Line">
            <summary>
            Line style.
            </summary>
        </member>
        <member name="F:Accord.Controls.Chart.SeriesType.Dots">
            <summary>
            Dots style.
            </summary>
        </member>
        <member name="F:Accord.Controls.Chart.SeriesType.ConnectedDots">
            <summary>
            Connected dots style.
            </summary>
        </member>
        <member name="P:Accord.Controls.Chart.RangeX">
            <summary>
            Chart's X range.
            </summary>
            
            <remarks><para>The value sets the X range of data to be displayed on the chart.</para></remarks>
            
        </member>
        <member name="P:Accord.Controls.Chart.RangeY">
             <summary>
             Chart's Y range.
             </summary>
             
             <remarks>The value sets the Y range of data to be displayed on the chart.</remarks>
            
        </member>
        <member name="F:Accord.Controls.Chart.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Accord.Controls.Chart.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Accord.Controls.Chart"/> class.
            </summary>
            
        </member>
        <member name="M:Accord.Controls.Chart.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
        </member>
        <member name="M:Accord.Controls.Chart.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Accord.Controls.Chart.AddDataSeries(System.String,System.Drawing.Color,Accord.Controls.Chart.SeriesType,System.Int32)">
            <summary>
            Add data series to the chart.
            </summary>
            
            <param name="name">Data series name.</param>
            <param name="color">Data series color.</param>
            <param name="type">Data series type.</param>
            <param name="width">Width (depends on the data series type, see remarks).</param>
            
            <remarks><para>Adds new empty data series to the collection of data series. To update this
            series the <see cref="M:Accord.Controls.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])"/> method should be used.</para>
            
            <para>The meaning of the width parameter depends on the data series type:
            <list type="bullet">
            <item><b>Line</b> - width of the line;</item>
            <item><b>Dots</b> - size of dots (rectangular dots with specified width and the same height);</item>
            <item><b>Connected dots</b> - size of dots (dots are connected with one pixel width line).</item>
            </list>
            </para>
            </remarks>
            
        </member>
        <member name="M:Accord.Controls.Chart.AddDataSeries(System.String,System.Drawing.Color,Accord.Controls.Chart.SeriesType,System.Int32,System.Boolean)">
            <summary>
            Add data series to the chart.
            </summary>
            
            <param name="name">Data series name.</param>
            <param name="color">Data series color.</param>
            <param name="type">Data series type.</param>
            <param name="width">Width (depends on the data series type, see remarks).</param>
            <param name="updateYRange">Specifies if <see cref="P:Accord.Controls.Chart.RangeY"/> should be updated.</param>
            
            <remarks><para>Adds new empty data series to the collection of data series.</para>
            
            <para>The <b>updateYRange</b> parameter specifies if the data series may affect displayable
            Y range. If the value is set to false, then displayable Y range is not updated, but used the
            range, which was specified by user (see <see cref="P:Accord.Controls.Chart.RangeY"/> property). In the case if the
            value is set to true, the displayable Y range is recalculated to fully fit the new data
            series.</para>
            </remarks>
            
        </member>
        <member name="M:Accord.Controls.Chart.UpdateDataSeries(System.String,System.Double[0:,0:])">
            <summary>
            Update data series on the chart.
            </summary>
            
            <param name="name">Data series name to update.</param>
            <param name="data">Data series values.</param>
            
        </member>
        <member name="M:Accord.Controls.Chart.RemoveDataSeries(System.String)">
            <summary>
            Remove data series from the chart.
            </summary>
            
            <param name="name">Data series name to remove.</param>
            
        </member>
        <member name="M:Accord.Controls.Chart.RemoveAllDataSeries">
            <summary>
            Remove all data series from the chart.
            </summary>
        </member>
        <member name="M:Accord.Controls.Chart.UpdateYRange">
            <summary>
            Update Y range.
            </summary>
        </member>
        <member name="P:Accord.DoubleRange.Min">
            <summary>
              Minimum value of the range.
            </summary>
            
            <remarks>
              Represents minimum value (left side limit) of the range [<b>min</b>, max].
            </remarks>
            
        </member>
        <member name="P:Accord.DoubleRange.Max">
            <summary>
              Maximum value of the range.
            </summary>
            
            <remarks>
              Represents maximum value (right side limit) of the range [min, <b>max</b>].
            </remarks>
            
        </member>
        <member name="P:Accord.DoubleRange.Length">
            <summary>
              Gets the length of the range, defined as (max - min).
            </summary>
            
        </member>
        <member name="M:Accord.DoubleRange.#ctor(System.Double,System.Double)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.DoubleRange"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:Accord.DoubleRange.IsInside(System.Double)">
            <summary>
              Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns>
              <b>True</b> if the specified value is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.IsInside(Accord.DoubleRange)">
            <summary>
              Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns>
              <b>True</b> if the specified range is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.IsOverlapping(Accord.DoubleRange)">
            <summary>
              Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns>
              <b>True</b> if the specified range overlaps with the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.Intersection(Accord.DoubleRange)">
            <summary>
              Computes the intersection between two ranges.
            </summary>
            
            <param name="range">The second range for which the intersection should be calculated.</param>
            
            <returns>An new <see cref="T:Accord.IntRange"/> structure containing the intersection
            between this range and the <paramref name="range"/> given as argument.</returns>
            
        </member>
        <member name="M:Accord.DoubleRange.op_Equality(Accord.DoubleRange,Accord.DoubleRange)">
            <summary>
              Determines whether two instances are equal.
            </summary>
            
        </member>
        <member name="M:Accord.DoubleRange.op_Inequality(Accord.DoubleRange,Accord.DoubleRange)">
            <summary>
              Determines whether two instances are not equal.
            </summary>
            
        </member>
        <member name="M:Accord.DoubleRange.Equals(Accord.DoubleRange)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <param name="other">An object to compare with this object.</param>
            
            <returns>
              true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.DoubleRange.ToIntRange(System.Boolean)">
             <summary>
               Converts this double-precision range into an <see cref="T:Accord.IntRange"/>.
             </summary>
             
             <param name="provideInnerRange">
               Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>
               If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
               returned integer range will always fit inside of the current single precision range.
               If it is set to <see langword="false"/>, then current single precision range will always
               fit into the returned integer range.
             </remarks>
            
        </member>
        <member name="M:Accord.DoubleRange.ToArray">
            <summary>
            Converts this <see cref="T:Accord.DoubleRange"/> to a <see cref="T:System.Double[]"/> of length 2 (using new [] { min, max }).
            </summary>
            
            <returns>The result of the conversion.</returns>
            
        </member>
        <member name="M:Accord.DoubleRange.op_Implicit(Accord.DoubleRange)~System.Double[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Accord.DoubleRange"/> to <see cref="T:System.Double[]"/>.
            </summary>
            
            <param name="range">The range.</param>
            
            <returns>The result of the conversion.</returns>
            
        </member>
        <member name="T:Accord.IntRange">
             <summary>
               Represents an integer range with minimum and maximum values.
             </summary>
             
             <remarks>
               The class represents an integer range with inclusive limits, where
               both minimum and maximum values of the range are included into it.
               Mathematical notation of such range is <b>[min, max]</b>.
             </remarks>
             
             <example>
             <code>
             // create [1, 10] range
             var range1 = new IntRange(1, 10);
             
             // create [5, 15] range
             var range2 = new IntRange(5, 15);
             
             check if values is inside of the first range
             if (range1.IsInside(7))
             {
                 // ...
             }
             
             // check if the second range is inside of the first range
             if (range1.IsInside(range2))
             {
                 // ...
             }
             
             // check if two ranges overlap
             if (range1.IsOverlapping(range2))
             {
                 // ...
             }
             </code>
             </example>
             
             <seealso cref="T:Accord.DoubleRange"/>
             <seealso cref="T:Accord.Range"/>
             <seealso cref="T:Accord.IntRange"/>
            
        </member>
        <member name="P:Accord.IntRange.Min">
            <summary>
              Minimum value of the range.
            </summary>
            
            <remarks>
              Represents minimum value (left side limit) of the range [<b>min</b>, max].
            </remarks>
            
        </member>
        <member name="P:Accord.IntRange.Max">
            <summary>
              Maximum value of the range.
            </summary>
            
            <remarks>
              Represents maximum value (right side limit) of the range [min, <b>max</b>].
            </remarks>
            
        </member>
        <member name="P:Accord.IntRange.Length">
            <summary>
              Gets the length of the range, defined as (max - min).
            </summary>
            
        </member>
        <member name="M:Accord.IntRange.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.IntRange"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:Accord.IntRange.IsInside(System.Int32)">
            <summary>
              Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns>
              <b>True</b> if the specified value is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.Intersection(Accord.IntRange)">
            <summary>
              Computes the intersection between two ranges.
            </summary>
            
            <param name="range">The second range for which the intersection should be calculated.</param>
            
            <returns>An new <see cref="T:Accord.IntRange"/> structure containing the intersection
            between this range and the <paramref name="range"/> given as argument.</returns>
            
        </member>
        <member name="M:Accord.IntRange.IsInside(Accord.IntRange)">
            <summary>
              Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns>
              <b>True</b> if the specified range is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.IsOverlapping(Accord.IntRange)">
            <summary>
              Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns>
              <b>True</b> if the specified range overlaps with the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.op_Equality(Accord.IntRange,Accord.IntRange)">
            <summary>
              Determines whether two instances are equal.
            </summary>
            
        </member>
        <member name="M:Accord.IntRange.op_Inequality(Accord.IntRange,Accord.IntRange)">
            <summary>
              Determines whether two instances are not equal.
            </summary>
            
        </member>
        <member name="M:Accord.IntRange.Equals(Accord.IntRange)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <param name="other">An object to compare with this object.</param>
            
            <returns>
              true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.op_Implicit(Accord.IntRange)~Accord.DoubleRange">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.IntRange"/> to <see cref="T:Accord.DoubleRange"/>.
            </summary>
            
            <param name="range">The range.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.op_Implicit(Accord.IntRange)~Accord.Range">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.IntRange"/> to <see cref="T:Accord.Range"/>.
            </summary>
            
            <param name="range">The range.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="M:Accord.IntRange.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through a collection.
            </summary>
            
            <returns>
              An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            
        </member>
        <member name="P:Accord.IRange`1.Min">
            <summary>
              Minimum value of the range.
            </summary>
            
            <remarks>
              Represents minimum value (left side limit) of the range [<b>min</b>, max].
            </remarks>
            
        </member>
        <member name="P:Accord.IRange`1.Max">
            <summary>
              Maximum value of the range.
            </summary>
            
            <remarks>
              Represents maximum value (right side limit) of the range [min, <b>max</b>].
            </remarks>
            
        </member>
        <member name="P:Accord.Range.Min">
            <summary>
              Minimum value of the range.
            </summary>
            
            <remarks>
              Represents minimum value (left side limit) of the range [<b>min</b>, max].
            </remarks>
            
        </member>
        <member name="P:Accord.Range.Max">
            <summary>
              Maximum value of the range.
            </summary>
            
            <remarks>
              Represents maximum value (right side limit) of the range [min, <b>max</b>].
            </remarks>
            
        </member>
        <member name="P:Accord.Range.Length">
            <summary>
              Gets the length of the range, defined as (max - min).
            </summary>
            
        </member>
        <member name="M:Accord.Range.#ctor(System.Single,System.Single)">
            <summary>
              Initializes a new instance of the <see cref="T:Accord.Range"/> class.
            </summary>
            
            <param name="min">Minimum value of the range.</param>
            <param name="max">Maximum value of the range.</param>
            
        </member>
        <member name="M:Accord.Range.IsInside(System.Single)">
            <summary>
              Check if the specified value is inside of the range.
            </summary>
            
            <param name="x">Value to check.</param>
            
            <returns>
              <b>True</b> if the specified value is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Range.IsInside(Accord.Range)">
            <summary>
              Check if the specified range is inside of the range.
            </summary>
            
            <param name="range">Range to check.</param>
            
            <returns>
              <b>True</b> if the specified range is inside of the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Range.IsOverlapping(Accord.Range)">
            <summary>
              Check if the specified range overlaps with the range.
            </summary>
            
            <param name="range">Range to check for overlapping.</param>
            
            <returns>
              <b>True</b> if the specified range overlaps with the range or <b>false</b> otherwise.
            </returns>
            
        </member>
        <member name="M:Accord.Range.Intersection(Accord.Range)">
            <summary>
              Computes the intersection between two ranges.
            </summary>
            
            <param name="range">The second range for which the intersection should be calculated.</param>
            
            <returns>An new <see cref="T:Accord.Range"/> structure containing the intersection
            between this range and the <paramref name="range"/> given as argument.</returns>
            
        </member>
        <member name="M:Accord.Range.op_Equality(Accord.Range,Accord.Range)">
            <summary>
              Determines whether two instances are equal.
            </summary>
            
        </member>
        <member name="M:Accord.Range.op_Inequality(Accord.Range,Accord.Range)">
            <summary>
              Determines whether two instances are not equal.
            </summary>
            
        </member>
        <member name="M:Accord.Range.Equals(Accord.Range)">
            <summary>
              Indicates whether the current object is equal to another object of the same type.
            </summary>
            
            <param name="other">An object to compare with this object.</param>
            
            <returns>
              true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            
        </member>
        <member name="M:Accord.Range.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
            
        </member>
        <member name="M:Accord.Range.GetHashCode">
            <summary>
              Returns a hash code for this instance.
            </summary>
            
            <returns>
              A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
            
        </member>
        <member name="M:Accord.Range.ToString">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Range.ToString(System.String,System.IFormatProvider)">
            <summary>
              Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            
            <returns>
              A <see cref="T:System.String" /> that represents this instance.
            </returns>
            
        </member>
        <member name="M:Accord.Range.op_Implicit(Accord.Range)~Accord.DoubleRange">
            <summary>
              Performs an implicit conversion from <see cref="T:Accord.IntRange"/> to <see cref="T:Accord.DoubleRange"/>.
            </summary>
            
            <param name="range">The range.</param>
            
            <returns>
              The result of the conversion.
            </returns>
            
        </member>
        <member name="M:Accord.Range.ToIntRange(System.Boolean)">
             <summary>
               Converts this single-precision range into an <see cref="T:Accord.IntRange"/>.
             </summary>
             
             <param name="provideInnerRange">
               Specifies if inner integer range must be returned or outer range.</param>
             
             <returns>Returns integer version of the range.</returns>
             
             <remarks>
               If <paramref name="provideInnerRange"/> is set to <see langword="true"/>, then the
               returned integer range will always fit inside of the current single precision range.
               If it is set to <see langword="false"/>, then current single precision range will always
               fit into the returned integer range.
             </remarks>
            
        </member>
    </members>
</doc>
